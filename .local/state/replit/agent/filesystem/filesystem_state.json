{"file_contents":{"client/src/contexts/PlanContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ntype PlanType = 'free' | 'pro' | null;\n\ninterface PlanContextType {\n  plan: PlanType;\n  setPlan: (plan: PlanType) => void;\n}\n\nconst PlanContext = createContext<PlanContextType | undefined>(undefined);\n\nexport function PlanProvider({ children }: { children: ReactNode }) {\n  const [plan, setPlanState] = useState<PlanType>(() => {\n    const saved = localStorage.getItem('kairo-plan');\n    return (saved as PlanType) || null;\n  });\n\n  useEffect(() => {\n    if (plan) {\n      localStorage.setItem('kairo-plan', plan);\n    } else {\n      localStorage.removeItem('kairo-plan');\n    }\n  }, [plan]);\n\n  const setPlan = (newPlan: PlanType) => {\n    setPlanState(newPlan);\n  };\n\n  return (\n    <PlanContext.Provider value={{ plan, setPlan }}>\n      {children}\n    </PlanContext.Provider>\n  );\n}\n\nexport function usePlan() {\n  const context = useContext(PlanContext);\n  if (context === undefined) {\n    throw new Error('usePlan must be used within a PlanProvider');\n  }\n  return context;\n}\n","size_bytes":1064},"client/src/components/DailyTip.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { Lightbulb } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface DailyTipProps {\n  tip?: string;\n}\n\nexport default function DailyTip({ tip }: DailyTipProps) {\n  const defaultTip = \"Take a few deep breaths. Inhale for 4 counts, hold for 4, exhale for 4. Notice how your body relaxes.\";\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      <Card className=\"p-6 bg-gradient-to-br from-[#A1E3F9]/20 to-[#D1F8EF]/20 border-[#A1E3F9]/30\" data-testid=\"card-daily-tip\">\n        <div className=\"flex items-start gap-4\">\n          <div className=\"bg-primary/10 p-3 rounded-lg\">\n            <Lightbulb className=\"w-6 h-6 text-primary\" data-testid=\"icon-lightbulb\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-lg mb-2\" data-testid=\"text-tip-title\">Daily Wellness Tip</h3>\n            <p className=\"text-muted-foreground\" data-testid=\"text-tip-content\">{tip || defaultTip}</p>\n          </div>\n        </div>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":1146},"client/src/components/LandingPage.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { useLocation } from 'wouter';\nimport kairoLogo from '@assets/Logo_Kairo_Final-removebg-preview_1761680007331.png';\nimport { Brain, Heart, Shield, Users, Sparkles, Target, Quote } from 'lucide-react';\nimport Footer from '@/components/Footer';\n\nexport default function LandingPage() {\n  const [, setLocation] = useLocation();\n\n  const testimonials = [\n    {\n      quote: \"Kairo didn't just help me manage my emotions — it helped me understand them.\",\n      text: \"I used to think I was just \\\"bad at handling stress.\\\" Kairo's daily reflections and guided EQ exercises helped me notice my emotional patterns. Now, I don't run from tough days — I learn from them.\",\n      author: \"Meera Sharma\",\n      role: \"MBA Student, 22\"\n    },\n    {\n      quote: \"The Vent Room feels like talking to a friend who really listens.\",\n      text: \"When I feel anxious or overwhelmed, I open Kairo. The AI Consoling Agent responds with calm and compassion — never robotic, always kind. It's become my go-to emotional anchor.\",\n      author: \"Rohit Patel\",\n      role: \"NGO Volunteer, 28\"\n    },\n    {\n      quote: \"Kairo made my team emotionally stronger — and surprisingly, more productive.\",\n      text: \"As a manager, I've tried many wellness tools, but none built trust like Kairo. Our team uses the mood tracker and Healing Circles every week — conflicts dropped, collaboration rose.\",\n      author: \"Arjun Mehta\",\n      role: \"Project Manager, 35\"\n    },\n    {\n      quote: \"It's like having emotional analytics for my students.\",\n      text: \"I'm a school counselor, and Kairo helps me monitor emotional growth in ways I never could before. The dashboards and EQ tests give clarity that conversations alone can't.\",\n      author: \"Kavita Rao\",\n      role: \"School Counselor, 42\"\n    },\n    {\n      quote: \"I never thought technology could feel this human.\",\n      text: \"Kairo's AI isn't just smart — it's emotionally aware. The tone changes with my mood, and the insights feel personal, not generic. It's like therapy, reflection, and motivation rolled into one.\",\n      author: \"Sana Ahmed\",\n      role: \"Graduate Student Abroad, 25\"\n    },\n    {\n      quote: \"Kairo taught me that growth doesn't mean perfection — it means awareness.\",\n      text: \"It's not an app you just 'use'; it's a space that grows with you. My EQ journey feels real, measurable, and deeply personal.\",\n      author: \"Anonymous\",\n      role: \"Corporate Wellness Program Member, 29\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden bg-gradient-to-br from-[#1a3a52] via-[#2d5a8f] to-[#3d6a9f] min-h-screen flex items-center\">\n        <div className=\"absolute inset-0 bg-gradient-to-b from-black/30 to-transparent\" />\n        \n        <div className=\"relative z-10 container mx-auto px-6 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"mb-12\"\n          >\n            <img \n              src={kairoLogo} \n              alt=\"Kairo\" \n              className=\"w-40 h-40 mx-auto mb-8 drop-shadow-2xl\"\n              data-testid=\"img-kairo-logo\"\n            />\n          </motion.div>\n\n          <motion.h1\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"text-5xl md:text-7xl font-bold text-white mb-6 tracking-tight\"\n            data-testid=\"text-hero-title\"\n          >\n            Find Calm, Anytime, Anywhere\n          </motion.h1>\n\n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n            className=\"text-xl md:text-2xl text-white/90 mb-12 max-w-2xl mx-auto font-light\"\n            data-testid=\"text-hero-subtitle\"\n          >\n            Your personal companion for emotional wellness and mental health support.\n          </motion.p>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.6 }}\n          >\n            <Button\n              size=\"lg\"\n              onClick={() => setLocation('/select-plan')}\n              className=\"bg-gradient-to-r from-[#4a7cb8] to-[#5d8fc9] hover:from-[#3d6a9f] hover:to-[#4a7cb8] text-white text-lg px-12 py-6 rounded-full shadow-2xl font-semibold border-2 border-white/30 transition-all duration-300\"\n              data-testid=\"button-begin-journey\"\n            >\n              Begin Your Journey\n            </Button>\n          </motion.div>\n        </div>\n      </div>\n\n      {/* About Kairo Section */}\n      <section className=\"py-20 bg-gradient-to-b from-background to-muted/30\" id=\"about\">\n        <div className=\"container mx-auto px-6 max-w-7xl\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6 }}\n            className=\"bg-gradient-to-br from-primary/5 to-primary/10 rounded-2xl p-8 md:p-12 mb-16\"\n            data-testid=\"section-about\"\n          >\n            <div className=\"flex items-center gap-3 mb-8 justify-center\">\n              <div className=\"bg-primary/10 p-3 rounded-lg\">\n                <Heart className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h2 className=\"text-3xl md:text-4xl font-bold\" data-testid=\"text-about-title\">About Kairo</h2>\n            </div>\n            <div className=\"space-y-5 text-base md:text-lg text-muted-foreground leading-relaxed text-center max-w-4xl mx-auto\">\n              <p>\n                Kairo comes from <strong className=\"text-foreground\">Kairos</strong> — the ancient Greek word for \"the right moment.\"\n              </p>\n              <p>\n                It's that pause between feeling and understanding, where growth truly happens.\n              </p>\n              <p>\n                Kairo exists to help people find that pause — to reflect, heal, and transform.\n              </p>\n              <p>\n                In a world that moves too fast for emotions, Kairo offers a space to slow down.\n              </p>\n              <p>\n                We combine <strong className=\"text-foreground\">Artificial Intelligence</strong>, <strong className=\"text-foreground\">Emotional Intelligence</strong>, and <strong className=\"text-foreground\">Human Connection</strong> to help individuals understand their emotions, strengthen resilience, and build meaningful relationships.\n              </p>\n              <p>\n                Our platform isn't just another therapy app — it's an <strong className=\"text-foreground\">emotional ecosystem</strong>.\n              </p>\n              <p>\n                From AI-driven reflection and mood tracking to real mentors and Healing Circles, Kairo empowers you to grow emotionally, one insight at a time.\n              </p>\n              <p>\n                Because emotional well-being isn't a luxury - it's a lifelong skill.\n              </p>\n            </div>\n          </motion.div>\n\n          {/* Vision & Mission */}\n          <div className=\"grid md:grid-cols-2 gap-12 mb-20\">\n            <motion.div\n              initial={{ opacity: 0, x: -30 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-card rounded-2xl p-8 shadow-lg\"\n              data-testid=\"section-vision\"\n            >\n              <div className=\"flex items-center gap-3 mb-6\">\n                <div className=\"bg-primary/10 p-3 rounded-lg\">\n                  <Target className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h3 className=\"text-2xl font-bold\">Our Vision</h3>\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                To become the world's leading Emotional Intelligence Platform, empowering individuals, organizations, and communities to cultivate empathy, self-awareness, and mental resilience — creating a future where technology drives emotional well-being and personal transformation.\n              </p>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, x: 30 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-card rounded-2xl p-8 shadow-lg\"\n              data-testid=\"section-mission\"\n            >\n              <div className=\"flex items-center gap-3 mb-6\">\n                <div className=\"bg-primary/10 p-3 rounded-lg\">\n                  <Heart className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h3 className=\"text-2xl font-bold\">Our Mission</h3>\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                To enhance global emotional well-being by integrating artificial intelligence, emotional intelligence and human connection. Kairo aims to provide a personalized, data-driven, and compassionate platform that helps individuals build self-awareness, emotional resilience, and meaningful relationships through continuous emotional growth.\n              </p>\n            </motion.div>\n          </div>\n\n          {/* What Makes Kairo Different */}\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6 }}\n            className=\"bg-gradient-to-br from-primary/5 to-primary/10 rounded-2xl p-8 md:p-12 mb-20\"\n          >\n            <div className=\"flex items-center gap-3 mb-8 justify-center\">\n              <div className=\"bg-primary/10 p-3 rounded-lg\">\n                <Sparkles className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-3xl font-bold\">What Makes Kairo Different</h3>\n            </div>\n            <div className=\"grid md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n              <div className=\"flex items-start gap-3\">\n                <span className=\"text-primary text-2xl\">✓</span>\n                <p className=\"text-muted-foreground\">A mood-adaptive interface that feels with you, not at you.</p>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <span className=\"text-primary text-2xl\">✓</span>\n                <p className=\"text-muted-foreground\">A compassionate AI Consoling Agent that truly listens.</p>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <span className=\"text-primary text-2xl\">✓</span>\n                <p className=\"text-muted-foreground\">Real mentors and peer communities that offer genuine support.</p>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <span className=\"text-primary text-2xl\">✓</span>\n                <p className=\"text-muted-foreground\">Gamified EQ growth — measure your emotional progress like fitness goals.</p>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <span className=\"text-primary text-2xl\">✓</span>\n                <p className=\"text-muted-foreground\">A safety net that blends AI, therapy, and crisis care.</p>\n              </div>\n            </div>\n            <p className=\"text-center text-base md:text-lg mt-8 text-muted-foreground\">\n              Kairo isn't about fixing emotions. It's about understanding them — and finding growth in every feeling.\n            </p>\n          </motion.div>\n\n          {/* Understanding Mental Health */}\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6 }}\n            className=\"bg-card rounded-2xl p-8 md:p-12 mb-12\"\n            data-testid=\"section-understanding\"\n          >\n            <div className=\"flex items-center gap-3 mb-6\">\n              <div className=\"bg-primary/10 p-3 rounded-lg\">\n                <Brain className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-2xl font-bold\">Understanding Mental Health</h3>\n            </div>\n            <p className=\"text-muted-foreground leading-relaxed mb-6\">\n              Mental health encompasses our emotional, psychological, and social well-being. It affects how we think, feel, and act. Just like physical health, mental health exists on a spectrum and can change throughout our lives.\n            </p>\n            <p className=\"text-muted-foreground leading-relaxed\">\n              Good mental health isn't just the absence of mental illness—it's about feeling capable, resilient, and able to cope with life's challenges. It's okay to not be okay, and seeking support is a sign of strength, not weakness.\n            </p>\n          </motion.div>\n\n          {/* Signs You Need Help */}\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6 }}\n            className=\"bg-primary/5 rounded-2xl p-8 md:p-12\"\n            data-testid=\"section-signs\"\n          >\n            <div className=\"flex items-center gap-3 mb-6\">\n              <div className=\"bg-primary/10 p-3 rounded-lg\">\n                <Users className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-2xl font-bold\">Signs You May Need Help</h3>\n            </div>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <ul className=\"space-y-3 text-muted-foreground\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-1\">•</span>\n                  <span>Persistent feelings of sadness, anxiety, or emptiness</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-1\">•</span>\n                  <span>Difficulty concentrating or making decisions</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-1\">•</span>\n                  <span>Changes in sleep patterns or appetite</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-1\">•</span>\n                  <span>Loss of interest in activities you once enjoyed</span>\n                </li>\n              </ul>\n              <ul className=\"space-y-3 text-muted-foreground\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-1\">•</span>\n                  <span>Withdrawal from friends and family</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-1\">•</span>\n                  <span>Extreme mood swings or irritability</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-1\">•</span>\n                  <span>Difficulty coping with daily stress</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-1\">•</span>\n                  <span>Thoughts of self-harm or suicide</span>\n                </li>\n              </ul>\n            </div>\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                If you're experiencing any of these signs, you're not alone. Help is available.\n              </p>\n              <Button\n                onClick={() => setLocation('/select-plan')}\n                size=\"lg\"\n                className=\"bg-primary hover:bg-primary/90\"\n                data-testid=\"button-get-help\"\n              >\n                Get Help Now\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-muted/50\">\n        <div className=\"container mx-auto px-6\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6 }}\n            className=\"text-center mb-16\"\n          >\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">What Our Users Say</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Real stories from people who found their emotional growth journey with Kairo\n            </p>\n          </motion.div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto\">\n            {testimonials.map((testimonial, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                className=\"bg-card rounded-2xl p-8 shadow-lg hover:shadow-xl transition-shadow\"\n              >\n                <Quote className=\"w-8 h-8 text-primary mb-4\" />\n                <h4 className=\"font-bold text-lg mb-3 text-foreground leading-snug\">\n                  {testimonial.quote}\n                </h4>\n                <p className=\"text-muted-foreground text-sm mb-6 leading-relaxed\">\n                  {testimonial.text}\n                </p>\n                <div className=\"border-t pt-4\">\n                  <p className=\"font-semibold text-foreground\">{testimonial.author}</p>\n                  <p className=\"text-sm text-muted-foreground\">{testimonial.role}</p>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":18316},"client/src/components/Feedback.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { useLocation } from 'wouter';\nimport { ArrowLeft, Heart } from 'lucide-react';\nimport Footer from '@/components/Footer';\n\nexport default function Feedback() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"bg-gradient-to-br from-[#1a3a52] to-[#2d5a8f] py-16\">\n        <div className=\"container mx-auto px-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation('/')}\n            className=\"text-white hover:bg-white/10 mb-8\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-white\">Feedback</h1>\n          <p className=\"text-white/80 mt-4\">Your voice helps Kairo evolve.</p>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-6 py-12 max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          className=\"text-center\"\n        >\n          <div className=\"bg-card rounded-2xl p-12 shadow-lg\">\n            <Heart className=\"w-16 h-16 text-primary mx-auto mb-6\" />\n            <h2 className=\"text-3xl font-bold mb-6\">Share Your Thoughts</h2>\n            <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Share your thoughts, suggestions, or stories at{' '}\n              <a href=\"mailto:feedback@kairo.app\" className=\"text-primary hover:underline font-medium\">\n                feedback@kairo.app\n              </a>\n              {' '}or via the in-app feedback form.\n            </p>\n            <p className=\"text-muted-foreground mb-8\">\n              Every message is read by our team — because your emotional growth journey helps shape ours too.\n            </p>\n\n            <div className=\"space-y-4 max-w-md mx-auto\">\n              <a href=\"mailto:feedback@kairo.app\">\n                <Button size=\"lg\" className=\"w-full\">\n                  Send Feedback via Email\n                </Button>\n              </a>\n              <p className=\"text-sm text-muted-foreground\">\n                Or provide feedback directly through the app for faster response\n              </p>\n            </div>\n          </div>\n\n          <div className=\"mt-12 grid md:grid-cols-3 gap-6\">\n            <div className=\"bg-muted/50 rounded-lg p-6\">\n              <h3 className=\"font-bold mb-2\">Feature Requests</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Tell us about features you'd like to see in Kairo\n              </p>\n            </div>\n            <div className=\"bg-muted/50 rounded-lg p-6\">\n              <h3 className=\"font-bold mb-2\">Bug Reports</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Help us improve by reporting any issues you encounter\n              </p>\n            </div>\n            <div className=\"bg-muted/50 rounded-lg p-6\">\n              <h3 className=\"font-bold mb-2\">Success Stories</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Share how Kairo has helped you on your journey\n              </p>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3396},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/CalendarView.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ChevronLeft, ChevronRight, Calendar, Users, Stethoscope, ArrowLeft } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface CalendarEvent {\n  id: number;\n  date: string;\n  type: 'session' | 'circle';\n  title: string;\n  time: string;\n}\n\n//todo: remove mock functionality\nconst events: CalendarEvent[] = [\n  { id: 1, date: '2025-10-28', type: 'session', title: 'Dr. Sarah Patel', time: '3:00 PM' },\n  { id: 2, date: '2025-10-28', type: 'circle', title: 'Anxiety Support', time: '7:00 PM' },\n  { id: 3, date: '2025-10-29', type: 'session', title: 'Dr. Priya Sharma', time: '4:00 PM' },\n  { id: 4, date: '2025-10-31', type: 'circle', title: 'Mindfulness Group', time: '6:30 PM' },\n];\n\ninterface CalendarViewProps {\n  onClose?: () => void;\n}\n\nexport default function CalendarView({ onClose }: CalendarViewProps) {\n  const [currentMonth] = useState(new Date(2025, 9, 1)); // October 2025\n\n  const getDaysInMonth = () => {\n    const year = currentMonth.getFullYear();\n    const month = currentMonth.getMonth();\n    const firstDay = new Date(year, month, 1).getDay();\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    \n    const days = [];\n    for (let i = 0; i < firstDay; i++) {\n      days.push(null);\n    }\n    for (let i = 1; i <= daysInMonth; i++) {\n      days.push(i);\n    }\n    return days;\n  };\n\n  const getEventsForDate = (day: number) => {\n    const year = currentMonth.getFullYear();\n    const month = String(currentMonth.getMonth() + 1).padStart(2, '0');\n    const dayStr = String(day).padStart(2, '0');\n    const dateStr = `${year}-${month}-${dayStr}`;\n    return events.filter(e => e.date === dateStr);\n  };\n\n  const days = getDaysInMonth();\n  const today = 28; // Mock today as Oct 28\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-6 z-50\" data-testid=\"modal-calendar\">\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        className=\"w-full max-w-4xl\"\n      >\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center gap-3\">\n              <Button variant=\"ghost\" onClick={onClose} data-testid=\"button-back\" size=\"sm\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n              <h2 className=\"text-2xl font-bold\" data-testid=\"text-calendar-title\">\n                <Calendar className=\"w-6 h-6 inline mr-2\" />\n                Your Schedule\n              </h2>\n            </div>\n            <Button variant=\"ghost\" onClick={onClose} data-testid=\"button-close\">\n              Close\n            </Button>\n          </div>\n\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-semibold\">\n              {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n            </h3>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"icon\">\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n              <Button variant=\"outline\" size=\"icon\">\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-7 gap-2 mb-2\">\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n              <div key={day} className=\"text-center font-semibold text-sm p-2\">\n                {day}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"grid grid-cols-7 gap-2\">\n            {days.map((day, index) => {\n              const dayEvents = day ? getEventsForDate(day) : [];\n              const isToday = day === today;\n\n              return (\n                <div\n                  key={index}\n                  className={`min-h-[100px] p-2 border rounded-lg ${\n                    day ? 'bg-card hover:bg-muted/50' : 'bg-muted/20'\n                  } ${isToday ? 'border-primary border-2' : ''}`}\n                  data-testid={day ? `calendar-day-${day}` : `calendar-empty-${index}`}\n                >\n                  {day && (\n                    <>\n                      <div className={`text-sm font-semibold mb-2 ${isToday ? 'text-primary' : ''}`}>\n                        {day}\n                      </div>\n                      <div className=\"space-y-1\">\n                        {dayEvents.map(event => (\n                          <div\n                            key={event.id}\n                            className={`text-xs p-1 rounded ${\n                              event.type === 'session' ? 'bg-primary/20 text-primary' : 'bg-secondary/50'\n                            }`}\n                            data-testid={`event-${event.id}`}\n                          >\n                            <div className=\"flex items-center gap-1\">\n                              {event.type === 'session' ? (\n                                <Stethoscope className=\"w-3 h-3\" />\n                              ) : (\n                                <Users className=\"w-3 h-3\" />\n                              )}\n                              <span className=\"truncate\">{event.title}</span>\n                            </div>\n                            <div className=\"text-[10px] opacity-75\">{event.time}</div>\n                          </div>\n                        ))}\n                      </div>\n                    </>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"mt-6 flex gap-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-primary/20 rounded\" />\n              <span>Therapy Sessions</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-secondary/50 rounded\" />\n              <span>Healing Circles</span>\n            </div>\n          </div>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":6239},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/examples/DualOptionPage.tsx":{"content":"import DualOptionPage from '../DualOptionPage';\nimport { PlanProvider } from '@/contexts/PlanContext';\n\nexport default function DualOptionPageExample() {\n  return (\n    <PlanProvider>\n      <DualOptionPage />\n    </PlanProvider>\n  );\n}\n","size_bytes":236},"client/src/components/ProfileDashboard.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { User, Calendar, Users, BookOpen, Heart, TrendingUp, Lightbulb, Mail, Save } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ProfileDashboardProps {\n  userName?: string;\n  isPro?: boolean;\n}\n\nexport default function ProfileDashboard({ userName = \"Guest User\", isPro = false }: ProfileDashboardProps) {\n  const { toast } = useToast();\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editedName, setEditedName] = useState(userName);\n  const [editedEmail, setEditedEmail] = useState(\"user@example.com\");\n  const [currentUserName, setCurrentUserName] = useState(userName);\n  const [currentEmail, setCurrentEmail] = useState(\"user@example.com\");\n\n  const stats = {\n    journalEntries: 24,\n    moodEntries: 45,\n    circlesJoined: isPro ? 3 : 1,\n    sessionsCompleted: 8,\n    daysActive: 42,\n  };\n\n  const recentActivity = [\n    { type: 'journal', text: 'Added journal entry', time: '2 hours ago' },\n    { type: 'mood', text: 'Logged mood as \"Good\"', time: '5 hours ago' },\n    { type: 'circle', text: 'Joined Mindfulness Circle', time: '1 day ago' },\n  ];\n\n  const wellnessTips = [\n    \"Try deep breathing for 5 minutes daily to reduce stress\",\n    \"Maintain a consistent sleep schedule for better mental health\",\n    \"Practice gratitude by writing 3 things you're thankful for each day\",\n  ];\n\n  const handleSaveProfile = () => {\n    setCurrentUserName(editedName);\n    setCurrentEmail(editedEmail);\n    setIsEditDialogOpen(false);\n    \n    toast({\n      title: \"Profile Updated\",\n      description: \"Your profile has been successfully updated.\",\n    });\n  };\n\n  const handleOpenEditDialog = () => {\n    setEditedName(currentUserName);\n    setEditedEmail(currentEmail);\n    setIsEditDialogOpen(true);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"p-6\" data-testid=\"card-profile-info\">\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Avatar className=\"w-20 h-20\">\n            <AvatarFallback className=\"bg-primary/10 text-primary text-2xl\">\n              {currentUserName.split(' ').map(n => n[0]).join('')}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1\">\n            <h2 className=\"text-2xl font-bold mb-1\" data-testid=\"text-user-name\">{currentUserName}</h2>\n            <p className=\"text-sm text-muted-foreground mb-2\">{currentEmail}</p>\n            <Badge variant={isPro ? 'default' : 'secondary'} data-testid=\"badge-plan\">\n              {isPro ? 'Pro Plan' : 'Free Plan'}\n            </Badge>\n          </div>\n          <Button variant=\"outline\" data-testid=\"button-edit-profile\" onClick={handleOpenEditDialog}>\n            <User className=\"w-4 h-4 mr-2\" />\n            Edit Profile\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n          <div className=\"text-center p-4 bg-muted rounded-lg\" data-testid=\"stat-days\">\n            <div className=\"text-2xl font-bold text-primary\">{stats.daysActive}</div>\n            <div className=\"text-xs text-muted-foreground mt-1\">Days Active</div>\n          </div>\n          <div className=\"text-center p-4 bg-muted rounded-lg\" data-testid=\"stat-journal\">\n            <div className=\"text-2xl font-bold text-primary\">{stats.journalEntries}</div>\n            <div className=\"text-xs text-muted-foreground mt-1\">Journal Entries</div>\n          </div>\n          {isPro && (\n            <div className=\"text-center p-4 bg-muted rounded-lg\" data-testid=\"stat-mood\">\n              <div className=\"text-2xl font-bold text-primary\">{stats.moodEntries}</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">Mood Logs</div>\n            </div>\n          )}\n          <div className=\"text-center p-4 bg-muted rounded-lg\" data-testid=\"stat-circles\">\n            <div className=\"text-2xl font-bold text-primary\">{stats.circlesJoined}</div>\n            <div className=\"text-xs text-muted-foreground mt-1\">Circles Joined</div>\n          </div>\n          {isPro && (\n            <div className=\"text-center p-4 bg-muted rounded-lg\" data-testid=\"stat-sessions\">\n              <div className=\"text-2xl font-bold text-primary\">{stats.sessionsCompleted}</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">Sessions</div>\n            </div>\n          )}\n        </div>\n      </Card>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <Card className=\"p-6\" data-testid=\"card-recent-activity\">\n          <h3 className=\"text-lg font-bold mb-4 flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5 text-primary\" />\n            Recent Activity\n          </h3>\n          <ScrollArea className=\"h-[200px]\">\n            <div className=\"space-y-3\">\n              {recentActivity.map((activity, index) => (\n                <div key={index} className=\"flex items-start gap-3 p-3 bg-muted rounded-lg\" data-testid={`activity-${index}`}>\n                  <div className=\"bg-primary/10 p-2 rounded\">\n                    {activity.type === 'journal' && <BookOpen className=\"w-4 h-4 text-primary\" />}\n                    {activity.type === 'mood' && <Heart className=\"w-4 h-4 text-primary\" />}\n                    {activity.type === 'circle' && <Users className=\"w-4 h-4 text-primary\" />}\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">{activity.text}</p>\n                    <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </ScrollArea>\n        </Card>\n\n        <Card className=\"p-6\" data-testid=\"card-wellness-tips\">\n          <h3 className=\"text-lg font-bold mb-4 flex items-center gap-2\">\n            <Lightbulb className=\"w-5 h-5 text-primary\" />\n            Wellness Tips for You\n          </h3>\n          <div className=\"space-y-3\">\n            {wellnessTips.map((tip, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, x: -10 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: index * 0.1 }}\n                className=\"p-3 bg-primary/5 rounded-lg border-l-4 border-primary\"\n                data-testid={`tip-${index}`}\n              >\n                <p className=\"text-sm\">{tip}</p>\n              </motion.div>\n            ))}\n          </div>\n        </Card>\n      </div>\n\n      {!isPro && (\n        <Card className=\"p-6 bg-gradient-to-br from-primary/10 to-primary/5\" data-testid=\"card-upgrade-prompt\">\n          <div className=\"text-center\">\n            <h3 className=\"text-xl font-bold mb-2\">Unlock More Features with Pro</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Get unlimited mood tracking, personalized insights, and choose your own therapist\n            </p>\n            <Button data-testid=\"button-upgrade\">Upgrade to Pro</Button>\n          </div>\n        </Card>\n      )}\n\n      {/* Edit Profile Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Profile</DialogTitle>\n            <DialogDescription>\n              Update your personal information below.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Full Name</Label>\n              <div className=\"flex items-center gap-2\">\n                <User className=\"w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"name\"\n                  value={editedName}\n                  onChange={(e) => setEditedName(e.target.value)}\n                  placeholder=\"Enter your name\"\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <div className=\"flex items-center gap-2\">\n                <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={editedEmail}\n                  onChange={(e) => setEditedEmail(e.target.value)}\n                  placeholder=\"Enter your email\"\n                />\n              </div>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleSaveProfile}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save Changes\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":9309},"client/src/components/CrisisSupport.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Phone, MessageSquare, AlertCircle, MapPin, Building, Heart } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\nconst helplines = [\n  {\n    name: \"KIRAN Mental Health Helpline\",\n    number: \"1800-599-0019\",\n    description: \"24/7 toll-free helpline by Ministry of Social Justice\"\n  },\n  {\n    name: \"Vandrevala Foundation\",\n    number: \"1860-2662-345\",\n    description: \"Free 24x7 helpline for mental health support\"\n  },\n  {\n    name: \"iCall Helpline\",\n    number: \"9152987821\",\n    description: \"Professional counseling via phone and email\"\n  }\n];\n\n//todo: remove mock functionality\nconst facilities = {\n  rehab: [\n    { name: \"Hope Rehabilitation Center\", location: \"Mumbai, Maharashtra\", distance: \"2.3 km\", phone: \"022-1234-5678\" },\n    { name: \"Serenity Recovery Centre\", location: \"Andheri, Mumbai\", distance: \"5.1 km\", phone: \"022-8765-4321\" },\n  ],\n  hospitals: [\n    { name: \"KEM Hospital - Psychiatry Dept\", location: \"Parel, Mumbai\", distance: \"3.7 km\", phone: \"022-2413-6051\" },\n    { name: \"Fortis Hospital Mental Health\", location: \"Mulund, Mumbai\", distance: \"8.2 km\", phone: \"022-6754-3210\" },\n  ],\n  ngos: [\n    { name: \"Connecting NGO\", location: \"Bandra, Mumbai\", distance: \"4.5 km\", phone: \"022-2642-7896\" },\n    { name: \"Sangath Mental Health\", location: \"Colaba, Mumbai\", distance: \"6.8 km\", phone: \"022-2218-5858\" },\n  ]\n};\n\ninterface CrisisSupportProps {\n  isPro?: boolean;\n}\n\nexport default function CrisisSupport({ isPro = false }: CrisisSupportProps) {\n  const [location, setLocation] = useState('');\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"p-6 border-destructive/50\" data-testid=\"card-crisis\">\n        <div className=\"flex items-start gap-4 mb-6\">\n          <div className=\"bg-destructive/10 p-3 rounded-lg\">\n            <AlertCircle className=\"w-6 h-6 text-destructive\" data-testid=\"icon-alert\" />\n          </div>\n          <div>\n            <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"text-crisis-title\">Crisis Support</h2>\n            <p className=\"text-muted-foreground mb-4\" data-testid=\"text-crisis-subtitle\">\n              If you're in immediate danger or experiencing a mental health crisis, please reach out for help immediately. You are not alone, and support is available 24/7.\n            </p>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-crisis-description\">\n              This section provides immediate access to crisis helplines, emergency contacts, and nearby mental health facilities. Help is just a call away.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"space-y-4 mb-6\">\n          {helplines.map((helpline, index) => (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n              className=\"p-4 rounded-lg bg-muted\"\n              data-testid={`helpline-${index}`}\n            >\n              <h3 className=\"font-semibold mb-1\" data-testid={`text-helpline-name-${index}`}>{helpline.name}</h3>\n              <p className=\"text-sm text-muted-foreground mb-3\" data-testid={`text-helpline-desc-${index}`}>\n                {helpline.description}\n              </p>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  className=\"flex items-center gap-2\"\n                  onClick={() => window.open(`tel:${helpline.number}`)}\n                  data-testid={`button-call-${index}`}\n                >\n                  <Phone className=\"w-4 h-4\" />\n                  Call {helpline.number}\n                </Button>\n              </div>\n            </motion.div>\n          ))}\n        </div>\n\n        {isPro && (\n          <div className=\"mt-6 p-4 bg-primary/5 rounded-lg\" data-testid=\"card-notify-therapist\">\n            <div className=\"flex items-start gap-3\">\n              <Heart className=\"w-5 h-5 text-primary mt-0.5\" />\n              <div>\n                <h4 className=\"font-semibold mb-1\">Notify Your Therapist</h4>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  Your assigned therapist will be notified about your crisis situation and will reach out to you as soon as possible.\n                </p>\n                <Button size=\"sm\" variant=\"outline\" data-testid=\"button-notify-therapist\">\n                  Send Alert to Therapist\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"mt-6 p-4 bg-primary/5 rounded-lg\">\n          <p className=\"text-sm text-center font-semibold\" data-testid=\"text-emergency-note\">\n            <strong>Emergency:</strong> If you're experiencing a medical emergency, please call 112 or visit your nearest hospital immediately.\n          </p>\n        </div>\n      </Card>\n\n      <Card className=\"p-6\" data-testid=\"card-find-facilities\">\n        <div className=\"flex items-center gap-3 mb-6\">\n          <div className=\"bg-primary/10 p-3 rounded-lg\">\n            <MapPin className=\"w-6 h-6 text-primary\" />\n          </div>\n          <div>\n            <h3 className=\"text-xl font-bold\">Find Nearby Facilities</h3>\n            <p className=\"text-sm text-muted-foreground\">Locate mental health support centers near you</p>\n          </div>\n        </div>\n\n        <div className=\"mb-6\">\n          <Input\n            placeholder=\"Enter your location...\"\n            value={location}\n            onChange={(e) => setLocation(e.target.value)}\n            data-testid=\"input-location\"\n          />\n        </div>\n\n        <Tabs defaultValue=\"hospitals\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"hospitals\" data-testid=\"tab-hospitals\">\n              <Building className=\"w-4 h-4 mr-2\" />\n              Hospitals\n            </TabsTrigger>\n            <TabsTrigger value=\"rehab\" data-testid=\"tab-rehab\">\n              <Heart className=\"w-4 h-4 mr-2\" />\n              Rehab Centers\n            </TabsTrigger>\n            <TabsTrigger value=\"ngos\" data-testid=\"tab-ngos\">\n              <MapPin className=\"w-4 h-4 mr-2\" />\n              NGOs\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"hospitals\" className=\"space-y-3 mt-4\">\n            {facilities.hospitals.map((facility, index) => (\n              <div key={index} className=\"p-4 bg-muted rounded-lg\" data-testid={`hospital-${index}`}>\n                <div className=\"flex justify-between items-start mb-2\">\n                  <h4 className=\"font-semibold\">{facility.name}</h4>\n                  <span className=\"text-xs text-muted-foreground\">{facility.distance}</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-2\">{facility.location}</p>\n                <Button size=\"sm\" variant=\"outline\" onClick={() => window.open(`tel:${facility.phone}`)}>\n                  <Phone className=\"w-3 h-3 mr-2\" />\n                  {facility.phone}\n                </Button>\n              </div>\n            ))}\n          </TabsContent>\n\n          <TabsContent value=\"rehab\" className=\"space-y-3 mt-4\">\n            {facilities.rehab.map((facility, index) => (\n              <div key={index} className=\"p-4 bg-muted rounded-lg\" data-testid={`rehab-${index}`}>\n                <div className=\"flex justify-between items-start mb-2\">\n                  <h4 className=\"font-semibold\">{facility.name}</h4>\n                  <span className=\"text-xs text-muted-foreground\">{facility.distance}</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-2\">{facility.location}</p>\n                <Button size=\"sm\" variant=\"outline\" onClick={() => window.open(`tel:${facility.phone}`)}>\n                  <Phone className=\"w-3 h-3 mr-2\" />\n                  {facility.phone}\n                </Button>\n              </div>\n            ))}\n          </TabsContent>\n\n          <TabsContent value=\"ngos\" className=\"space-y-3 mt-4\">\n            {facilities.ngos.map((facility, index) => (\n              <div key={index} className=\"p-4 bg-muted rounded-lg\" data-testid={`ngo-${index}`}>\n                <div className=\"flex justify-between items-start mb-2\">\n                  <h4 className=\"font-semibold\">{facility.name}</h4>\n                  <span className=\"text-xs text-muted-foreground\">{facility.distance}</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-2\">{facility.location}</p>\n                <Button size=\"sm\" variant=\"outline\" onClick={() => window.open(`tel:${facility.phone}`)}>\n                  <Phone className=\"w-3 h-3 mr-2\" />\n                  {facility.phone}\n                </Button>\n              </div>\n            ))}\n          </TabsContent>\n        </Tabs>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9131},"client/src/components/examples/ProPlanDashboard.tsx":{"content":"import ProPlanDashboard from '../ProPlanDashboard';\nimport { PlanProvider } from '@/contexts/PlanContext';\n\nexport default function ProPlanDashboardExample() {\n  return (\n    <PlanProvider>\n      <ProPlanDashboard />\n    </PlanProvider>\n  );\n}\n","size_bytes":244},"client/src/components/TermsOfService.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { useLocation } from 'wouter';\nimport { ArrowLeft } from 'lucide-react';\nimport Footer from '@/components/Footer';\n\nexport default function TermsOfService() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"bg-gradient-to-br from-[#1a3a52] to-[#2d5a8f] py-16\">\n        <div className=\"container mx-auto px-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation('/')}\n            className=\"text-white hover:bg-white/10 mb-8\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-white\">Terms of Service</h1>\n          <p className=\"text-white/80 mt-4\">Effective date: {new Date().toLocaleDateString()}</p>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-6 py-12 max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          className=\"prose prose-lg max-w-none\"\n        >\n          <p className=\"text-lg text-muted-foreground leading-relaxed mb-8\">\n            Welcome to Kairo. By accessing or using our app, you agree to the following terms.\n          </p>\n\n          <h2 className=\"text-2xl font-bold mt-8 mb-4\">1. Use of Service</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Kairo is a platform for emotional growth, self-awareness, and well-being. It is not a substitute for medical or psychological treatment.\n          </p>\n\n          <h2 className=\"text-2xl font-bold mt-8 mb-4\">2. Eligibility</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Users must be at least 13 years old. For minors, parental consent is required.\n          </p>\n\n          <h2 className=\"text-2xl font-bold mt-8 mb-4\">3. User Conduct</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Do not misuse or exploit Kairo's services. You agree not to upload harmful, offensive, or false content.\n          </p>\n\n          <h2 className=\"text-2xl font-bold mt-8 mb-4\">4. Subscriptions and Payments</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Premium features are billed monthly or annually. All payments are secure and non-refundable once activated.\n          </p>\n\n          <h2 className=\"text-2xl font-bold mt-8 mb-4\">5. Limitation of Liability</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Kairo provides guidance and support tools, not clinical diagnoses. We are not liable for any decisions made based on app content.\n          </p>\n\n          <h2 className=\"text-2xl font-bold mt-8 mb-4\">6. Termination</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            We may suspend or terminate accounts that violate these terms or compromise user safety.\n          </p>\n\n          <div className=\"mt-12 p-6 bg-muted rounded-lg\">\n            <p className=\"text-sm text-muted-foreground\">\n              If you have any questions about our Terms of Service, please contact us at{' '}\n              <a href=\"mailto:hello@kairo.app\" className=\"text-primary hover:underline\">\n                hello@kairo.app\n              </a>\n            </p>\n          </div>\n        </motion.div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3471},"client/src/components/HealingCircle.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Users, Calendar } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface HealingCircleProps {\n  name: string;\n  description: string;\n  schedule: string;\n  participants: number;\n  maxParticipants: number;\n  isJoined?: boolean;\n  onJoin?: () => void;\n  isPro?: boolean;\n  canJoinMore?: boolean;\n}\n\nexport default function HealingCircle({\n  name,\n  description,\n  schedule,\n  participants,\n  maxParticipants,\n  isJoined = false,\n  onJoin,\n  isPro = false,\n  canJoinMore = true\n}: HealingCircleProps) {\n  const isDisabled = isJoined || participants >= maxParticipants || !canJoinMore;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.4 }}\n    >\n      <Card className=\"p-6 hover-elevate\" data-testid=\"card-healing-circle\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-start justify-between gap-4\">\n            <div className=\"flex-1\">\n              <h3 className=\"text-xl font-bold mb-2\" data-testid=\"text-circle-name\">{name}</h3>\n              <p className=\"text-muted-foreground text-sm\" data-testid=\"text-circle-description\">{description}</p>\n            </div>\n            <Badge variant={isJoined ? 'default' : 'secondary'} data-testid=\"badge-status\">\n              {isJoined ? 'Joined' : 'Available'}\n            </Badge>\n          </div>\n\n          <div className=\"flex flex-wrap gap-4 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4\" data-testid=\"icon-calendar\" />\n              <span data-testid=\"text-schedule\">{schedule}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Users className=\"w-4 h-4\" data-testid=\"icon-users\" />\n              <span data-testid=\"text-participants\">{participants}/{maxParticipants} participants</span>\n            </div>\n          </div>\n\n          {!isPro && !canJoinMore && !isJoined && (\n            <p className=\"text-sm text-muted-foreground italic\" data-testid=\"text-limit-message\">\n              You can join 1 healing circle. Upgrade to Pro to join more circles.\n            </p>\n          )}\n\n          {isPro && !canJoinMore && !isJoined && (\n            <p className=\"text-sm text-muted-foreground italic\" data-testid=\"text-limit-message-pro\">\n              You can join 1 healing circle per month. You've reached your monthly limit.\n            </p>\n          )}\n\n          <Button\n            onClick={onJoin}\n            disabled={isDisabled}\n            className=\"w-full\"\n            variant={isJoined ? 'secondary' : 'default'}\n            data-testid=\"button-join\"\n          >\n            {isJoined ? 'Joined' : participants >= maxParticipants ? 'Full' : !canJoinMore ? 'Limit Reached' : 'Join Circle'}\n          </Button>\n        </div>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":3036},"src/models/user.ts":{"content":"import { Schema, model, Document } from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\n// This is a TypeScript interface. It tells us what properties a User object will have.\r\nexport interface IUser extends Document {\r\n    username: string;\r\n    email: string;\r\n    password?: string; // The '?' makes it optional, as we won't always send it back.\r\n}\r\n\r\n// This is the Mongoose Schema. It defines the structure for MongoDB.\r\nconst userSchema = new Schema<IUser>({\r\n    username: { type: String, required: true },\r\n    email: { type: String, required: true, unique: true },\r\n    // 'select: false' is a crucial security feature. It prevents the password\r\n    // from being sent back in queries by default.\r\n    password: { type: String, required: true, select: false }, \r\n}, { timestamps: true }); // Automatically adds 'createdAt' and 'updatedAt' fields.\r\n\r\n// This is a \"pre-save hook\". Before a user document is saved, this function\r\n// will run to hash the password. This ensures we never store plain-text passwords.\r\nuserSchema.pre('save', async function (next) {\r\n    if (!this.isModified('password') || !this.password) {\r\n        return next();\r\n    }\r\n    const salt = await bcrypt.genSalt(10);\r\n    this.password = await bcrypt.hash(this.password, salt);\r\n    next();\r\n});\r\n\r\n// Create and export the User model\r\nexport const User = model<IUser>('User', userSchema);\r\nexport default User;","size_bytes":1396},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/TherapistMatching.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Progress } from '@/components/ui/progress';\nimport { Users, CheckCircle } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport TherapistCard from './TherapistCard';\n\nconst questions = [\n  {\n    id: 1,\n    question: \"What type of therapy are you most interested in?\",\n    type: \"radio\",\n    options: [\"Cognitive Behavioral Therapy (CBT)\", \"Psychodynamic Therapy\", \"Mindfulness-Based Therapy\", \"Family/Couples Therapy\"]\n  },\n  {\n    id: 2,\n    question: \"What are your primary concerns? (Select all that apply)\",\n    type: \"checkbox\",\n    options: [\"Anxiety\", \"Depression\", \"Stress Management\", \"Relationship Issues\", \"Trauma\", \"Self-esteem\"]\n  },\n  {\n    id: 3,\n    question: \"What time of day do you prefer sessions?\",\n    type: \"radio\",\n    options: [\"Morning (8 AM - 12 PM)\", \"Afternoon (12 PM - 5 PM)\", \"Evening (5 PM - 9 PM)\", \"Flexible\"]\n  },\n  {\n    id: 4,\n    question: \"Do you have a gender preference for your therapist?\",\n    type: \"radio\",\n    options: [\"Female\", \"Male\", \"Non-binary\", \"No preference\"]\n  }\n];\n\n//todo: remove mock functionality\nconst matchedTherapists = [\n  {\n    name: \"Dr. Sarah Patel\",\n    specialization: \"CBT & Anxiety Specialist\",\n    bio: \"Specializing in cognitive behavioral therapy with over 10 years of experience helping clients manage anxiety and depression.\",\n    rating: 4.8,\n    reviews: 156,\n    yearsExperience: 12,\n    availability: \"Mon-Fri, 2-6 PM IST\",\n  },\n  {\n    name: \"Dr. Priya Sharma\",\n    specialization: \"Relationship Counseling\",\n    bio: \"Expert in helping couples and individuals navigate relationship challenges with compassion and evidence-based techniques.\",\n    rating: 4.9,\n    reviews: 203,\n    yearsExperience: 15,\n    availability: \"Wed-Sun, 3-8 PM IST\",\n  }\n];\n\nexport default function TherapistMatching() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [answers, setAnswers] = useState<Record<number, any>>({});\n  const [completed, setCompleted] = useState(false);\n\n  const handleRadioAnswer = (value: string) => {\n    const newAnswers = { ...answers, [questions[currentQuestion].id]: value };\n    setAnswers(newAnswers);\n  };\n\n  const handleCheckboxAnswer = (option: string, checked: boolean) => {\n    const currentAnswers = answers[questions[currentQuestion].id] || [];\n    const newAnswers = {\n      ...answers,\n      [questions[currentQuestion].id]: checked\n        ? [...currentAnswers, option]\n        : currentAnswers.filter((a: string) => a !== option)\n    };\n    setAnswers(newAnswers);\n  };\n\n  const handleNext = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      setCompleted(true);\n    }\n  };\n\n  const canProceed = () => {\n    const answer = answers[questions[currentQuestion].id];\n    if (questions[currentQuestion].type === \"checkbox\") {\n      return answer && answer.length > 0;\n    }\n    return !!answer;\n  };\n\n  const progress = ((currentQuestion + 1) / questions.length) * 100;\n\n  return (\n    <div className=\"space-y-6\">\n      {!completed ? (\n        <Card className=\"p-8\" data-testid=\"card-matching\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"bg-primary/10 p-3 rounded-lg\">\n              <Users className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold\">Get Matched with a Therapist</h2>\n              <p className=\"text-muted-foreground\">Answer a few questions to find your ideal therapist</p>\n            </div>\n          </div>\n\n          <div className=\"mb-4\">\n            <div className=\"flex justify-between text-sm text-muted-foreground mb-2\">\n              <span>Question {currentQuestion + 1} of {questions.length}</span>\n            </div>\n            <Progress value={progress} className=\"mb-6\" data-testid=\"progress-matching\" />\n          </div>\n\n          <AnimatePresence mode=\"wait\">\n            <motion.div\n              key={currentQuestion}\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n              transition={{ duration: 0.3 }}\n              className=\"space-y-6\"\n            >\n              <h3 className=\"text-lg font-medium\" data-testid={`question-${currentQuestion}`}>\n                {questions[currentQuestion].question}\n              </h3>\n\n              {questions[currentQuestion].type === \"radio\" ? (\n                <RadioGroup\n                  value={answers[questions[currentQuestion].id] || \"\"}\n                  onValueChange={handleRadioAnswer}\n                >\n                  {questions[currentQuestion].options.map((option, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\" data-testid={`option-${index}`}>\n                      <RadioGroupItem value={option} id={`q${currentQuestion}-${index}`} />\n                      <Label htmlFor={`q${currentQuestion}-${index}`} className=\"cursor-pointer\">\n                        {option}\n                      </Label>\n                    </div>\n                  ))}\n                </RadioGroup>\n              ) : (\n                <div className=\"space-y-3\">\n                  {questions[currentQuestion].options.map((option, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\" data-testid={`option-${index}`}>\n                      <Checkbox\n                        id={`q${currentQuestion}-${index}`}\n                        checked={(answers[questions[currentQuestion].id] || []).includes(option)}\n                        onCheckedChange={(checked) => handleCheckboxAnswer(option, checked as boolean)}\n                      />\n                      <Label htmlFor={`q${currentQuestion}-${index}`} className=\"cursor-pointer\">\n                        {option}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              <Button\n                onClick={handleNext}\n                disabled={!canProceed()}\n                className=\"w-full\"\n                data-testid=\"button-next\"\n              >\n                {currentQuestion < questions.length - 1 ? 'Next Question' : 'Find My Match'}\n              </Button>\n            </motion.div>\n          </AnimatePresence>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          <Card className=\"p-8 text-center\" data-testid=\"card-match-complete\">\n            <div className=\"bg-primary/10 w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"w-10 h-10 text-primary\" />\n            </div>\n            <h2 className=\"text-2xl font-bold mb-2\">We Found Your Matches!</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Based on your preferences, here are therapists we think would be a great fit for you.\n            </p>\n          </Card>\n\n          <div className=\"space-y-4\">\n            {matchedTherapists.map((therapist, index) => (\n              <TherapistCard\n                key={index}\n                {...therapist}\n                canSchedule={true}\n                onSchedule={() => console.log('Schedule with:', therapist.name)}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7642},"client/src/components/SessionBooking.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Calendar as CalendarIcon, Clock, CheckCircle2 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface SessionBookingProps {\n  therapistName: string;\n  availability?: string;\n  onBook?: (booking: any) => void;\n  onCancel?: () => void;\n}\n\nexport default function SessionBooking({ therapistName, availability = \"Mon-Fri, 9AM-5PM\", onBook, onCancel }: SessionBookingProps) {\n  const [date, setDate] = useState('');\n  const [time, setTime] = useState('');\n  const [notes, setNotes] = useState('');\n\n  const availableTimeSlots = [\n    '09:00', '10:00', '11:00', '14:00', '15:00', '16:00', '17:00'\n  ];\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onBook?.({ therapistName, date, time, notes });\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Card className=\"p-6\" data-testid=\"card-booking\">\n        <div className=\"mb-6\">\n          <h3 className=\"text-xl font-bold mb-2\" data-testid=\"text-booking-title\">\n            Book Session with {therapistName}\n          </h3>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Clock className=\"w-4 h-4\" />\n            <span>Available: {availability}</span>\n          </div>\n        </div>\n\n        <div className=\"mb-6 p-4 bg-muted rounded-lg\">\n          <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n            <CheckCircle2 className=\"w-4 h-4 text-primary\" />\n            Available Time Slots\n          </h4>\n          <div className=\"grid grid-cols-3 sm:grid-cols-4 gap-2\">\n            {availableTimeSlots.map((slot) => (\n              <Badge\n                key={slot}\n                variant=\"outline\"\n                className=\"justify-center py-2 cursor-pointer hover:bg-primary hover:text-primary-foreground transition-colors\"\n                onClick={() => setTime(slot)}\n                data-testid={`timeslot-${slot}`}\n              >\n                {slot}\n              </Badge>\n            ))}\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-3\">\n            Click a time slot to select it, or enter your own preferred time below\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"date\">Preferred Date</Label>\n            <Input\n              id=\"date\"\n              type=\"date\"\n              value={date}\n              onChange={(e) => setDate(e.target.value)}\n              required\n              data-testid=\"input-date\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"time\">Preferred Time</Label>\n            <Input\n              id=\"time\"\n              type=\"time\"\n              value={time}\n              onChange={(e) => setTime(e.target.value)}\n              required\n              data-testid=\"input-time\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"notes\">Session Notes (Optional)</Label>\n            <Textarea\n              id=\"notes\"\n              placeholder=\"Any specific topics or concerns you'd like to discuss...\"\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              data-testid=\"input-notes\"\n            />\n          </div>\n\n          <div className=\"flex gap-3\">\n            <Button type=\"submit\" className=\"flex-1\" data-testid=\"button-book\">\n              <CalendarIcon className=\"w-4 h-4 mr-2\" />\n              Confirm Booking\n            </Button>\n            <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":4104},"src/routes/chat.ts":{"content":"import { Router } from 'express';\r\nimport { createChatSession, sendMessage } from '../controllers/chatController';\r\n\r\n// Create a new router instance for chat-related routes.\r\nconst router = Router();\r\n\r\n// Define the route to create a new chat session.\r\n// When a POST request is made to '/session', the 'createChatSession' function will be executed.\r\nrouter.post('/session', createChatSession);\r\n\r\n// Define the route to send a message within a specific session.\r\n// The ':sessionId' is a URL parameter, allowing us to specify which session we're sending a message to.\r\n// Example: POST /api/chat/1234-abcd-5678/message\r\n// When a POST request is made to this URL, the 'sendMessage' function will be executed.\r\nrouter.post('/:sessionId/message', sendMessage);\r\n\r\n// Export the router to be used in our main index.ts file.\r\nexport default router;\r\n","size_bytes":849},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"src/controllers/authController.ts":{"content":"import { Request, Response } from 'express';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport { User } from '../models/user';\r\nimport { Session } from '../models/session';\r\n\r\n/**\r\n * Handles new user registration.\r\n */\r\nexport const registerUser = async (req: Request, res: Response) => {\r\n    try {\r\n        const { name, email, password } = req.body;\r\n\r\n        // 1. Validate input\r\n        if (!name || !email || !password) {\r\n            return res.status(400).json({ message: 'Please provide name, email, and password.' });\r\n        }\r\n\r\n        // 2. Check if user already exists\r\n        const existingUser = await User.findOne({ email });\r\n        if (existingUser) {\r\n            return res.status(409).json({ message: 'User with this email already exists.' });\r\n        }\r\n\r\n        // 3. Create and save the new user (password will be hashed by pre-save hook)\r\n        const newUser = new User({\r\n            username: name, // Map name to username field\r\n            email,\r\n            password: password, // The pre-save hook will hash this automatically\r\n        });\r\n        await newUser.save();\r\n\r\n        res.status(201).json({ message: 'User registered successfully.' });\r\n\r\n    } catch (error) {\r\n        console.error('Registration Error:', error);\r\n        res.status(500).json({ message: 'Server error during registration.' });\r\n    }\r\n};\r\n\r\n/**\r\n * Handles user login.\r\n */\r\nexport const loginUser = async (req: Request, res: Response) => {\r\n    try {\r\n        const { email, password } = req.body;\r\n\r\n        // 1. Validate input\r\n        if (!email || !password) {\r\n            return res.status(400).json({ message: 'Please provide email and password.' });\r\n        }\r\n\r\n        // 2. Find the user in the database (explicitly select password field)\r\n        const user = await User.findOne({ email }).select('+password');\r\n        if (!user) {\r\n            return res.status(401).json({ message: 'Invalid credentials.' }); // Generic message for security\r\n        }\r\n\r\n        // 3. Compare the provided password with the stored hashed password\r\n        const isMatch = await bcrypt.compare(password, user.password || '');\r\n        if (!isMatch) {\r\n            return res.status(401).json({ message: 'Invalid credentials.' });\r\n        }\r\n\r\n        // 4. If credentials are correct, create a JSON Web Token (JWT)\r\n        const payload = { userId: user._id };\r\n        const token = jwt.sign(\r\n            payload,\r\n            process.env.JWT_SECRET as string,\r\n            { expiresIn: '1d' } // Token expires in 1 day\r\n        );\r\n        \r\n        // 5. Create a session document in the database\r\n        const expiresAt = new Date();\r\n        expiresAt.setDate(expiresAt.getDate() + 1); // Session also expires in 1 day\r\n\r\n        await new Session({\r\n            userId: user._id,\r\n            token,\r\n            expiresAt,\r\n            deviceInfo: req.headers['user-agent'] // Optional: store user agent\r\n        }).save();\r\n\r\n\r\n        // 6. Send the token and user info back to the client\r\n        res.status(200).json({\r\n            message: 'Login successful.',\r\n            token,\r\n            user: {\r\n                id: user._id,\r\n                username: user.username,\r\n                email: user.email\r\n            }\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error('Login Error:', error);\r\n        res.status(500).json({ message: 'Server error during login.' });\r\n    }\r\n};","size_bytes":3461},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/NotificationsCard.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Bell, Calendar, Users, Clock } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface Notification {\n  id: number;\n  type: 'session' | 'circle' | 'reminder';\n  title: string;\n  message: string;\n  time: string;\n  daysLeft?: number;\n}\n\n//todo: remove mock functionality\nconst notifications: Notification[] = [\n  { id: 1, type: 'session', title: 'Upcoming Session', message: 'Session with Dr. Sarah Patel', time: 'Today, 3:00 PM', daysLeft: 0 },\n  { id: 2, type: 'circle', title: 'Circle Today', message: 'Anxiety Support Group starts in 2 hours', time: 'Today, 7:00 PM', daysLeft: 0 },\n  { id: 3, type: 'session', title: 'Session Reminder', message: 'Follow-up with Dr. Priya Sharma', time: 'Tomorrow, 4:00 PM', daysLeft: 1 },\n  { id: 4, type: 'reminder', title: 'Mood Check-in', message: \"Don't forget to log your mood today\", time: 'Pending', daysLeft: 0 },\n];\n\ninterface NotificationsCardProps {\n  isPro?: boolean;\n}\n\nexport default function NotificationsCard({ isPro = true }: NotificationsCardProps) {\n  const getIcon = (type: string) => {\n    switch (type) {\n      case 'session': return <Calendar className=\"w-4 h-4\" />;\n      case 'circle': return <Users className=\"w-4 h-4\" />;\n      case 'reminder': return <Bell className=\"w-4 h-4\" />;\n      default: return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getColor = (daysLeft?: number) => {\n    if (daysLeft === 0) return 'text-destructive';\n    if (daysLeft === 1) return 'text-orange-500';\n    return 'text-primary';\n  };\n\n  const filteredNotifications = isPro \n    ? notifications \n    : notifications.filter(n => n.type === 'circle');\n\n  return (\n    <Card className=\"p-6\" data-testid=\"card-notifications\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <div className=\"bg-primary/10 p-3 rounded-lg\">\n          <Bell className=\"w-6 h-6 text-primary\" />\n        </div>\n        <div>\n          <h3 className=\"text-xl font-bold\">Reminders & Notifications</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            {isPro ? 'Stay on track with your wellness journey' : 'Stay updated on circle activities'}\n          </p>\n        </div>\n      </div>\n\n      <ScrollArea className=\"h-[300px]\">\n        <div className=\"space-y-3\">\n          {filteredNotifications.map((notification) => (\n            <motion.div\n              key={notification.id}\n              initial={{ opacity: 0, x: -10 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"p-4 bg-muted rounded-lg\"\n              data-testid={`notification-${notification.id}`}\n            >\n              <div className=\"flex items-start justify-between gap-3\">\n                <div className=\"flex items-start gap-3 flex-1\">\n                  <div className={`mt-1 ${getColor(notification.daysLeft)}`}>\n                    {getIcon(notification.type)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-sm mb-1\">{notification.title}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{notification.message}</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">{notification.time}</p>\n                  </div>\n                </div>\n                {notification.daysLeft !== undefined && notification.daysLeft <= 2 && (\n                  <Badge variant={notification.daysLeft === 0 ? 'destructive' : 'secondary'} className=\"text-xs\">\n                    {notification.daysLeft === 0 ? 'Today' : `${notification.daysLeft}d left`}\n                  </Badge>\n                )}\n              </div>\n            </motion.div>\n          ))}\n        </div>\n      </ScrollArea>\n    </Card>\n  );\n}\n","size_bytes":3889},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/JournalEntry.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { BookOpen, Smile, Meh, Frown, Calendar } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\nconst moods = [\n  { icon: Smile, label: 'Happy', value: 'happy', color: 'text-green-500' },\n  { icon: Meh, label: 'Neutral', value: 'neutral', color: 'text-yellow-500' },\n  { icon: Frown, label: 'Sad', value: 'sad', color: 'text-blue-500' },\n];\n\n//todo: remove mock functionality\nconst writingPrompts = [\n  \"What brought you joy today?\",\n  \"What challenged you today, and how did you respond?\",\n  \"What are you grateful for right now?\",\n  \"Describe a moment when you felt proud of yourself recently.\",\n  \"What emotions are you experiencing right now, and why?\",\n];\n\ninterface Entry {\n  id: number;\n  content: string;\n  mood: string;\n  date: string;\n}\n\ninterface JournalEntryProps {\n  onSave?: (entry: { content: string; mood: string }) => void;\n  showPrompts?: boolean;\n  showPreviousEntries?: boolean;\n}\n\nexport default function JournalEntry({ onSave, showPrompts = false, showPreviousEntries = true }: JournalEntryProps) {\n  const [content, setContent] = useState('');\n  const [selectedMood, setSelectedMood] = useState('');\n  const [saved, setSaved] = useState(false);\n  const [selectedPrompt, setSelectedPrompt] = useState<string | null>(null);\n\n  //todo: remove mock functionality\n  const [previousEntries] = useState<Entry[]>([\n    { id: 1, content: \"Had a productive day at work. Feeling accomplished.\", mood: \"happy\", date: \"2025-10-27\" },\n    { id: 2, content: \"Dealing with some anxiety about upcoming deadlines.\", mood: \"sad\", date: \"2025-10-26\" },\n    { id: 3, content: \"Spent time with family. Feeling grateful and content.\", mood: \"happy\", date: \"2025-10-25\" },\n  ]);\n\n  const handleSave = () => {\n    if (content.trim()) {\n      onSave?.({ content, mood: selectedMood });\n      setSaved(true);\n      setTimeout(() => {\n        setContent('');\n        setSelectedMood('');\n        setSaved(false);\n        setSelectedPrompt(null);\n      }, 2000);\n    }\n  };\n\n  const handlePromptClick = (prompt: string) => {\n    setSelectedPrompt(prompt);\n    setContent(content + (content ? '\\n\\n' : '') + prompt + '\\n');\n  };\n\n  const getMoodIcon = (mood: string) => {\n    const moodData = moods.find(m => m.value === mood);\n    if (!moodData) return null;\n    const Icon = moodData.icon;\n    return <Icon className={`w-4 h-4 ${moodData.color}`} />;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"p-6\" data-testid=\"card-journal\">\n        <div className=\"mb-6\">\n          <div className=\"flex items-center gap-3 mb-3\">\n            <div className=\"bg-primary/10 p-3 rounded-lg\">\n              <BookOpen className=\"w-6 h-6 text-primary\" data-testid=\"icon-journal\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold\" data-testid=\"text-journal-title\">Journal Entry</h2>\n              <p className=\"text-muted-foreground\" data-testid=\"text-journal-subtitle\">Express your thoughts and feelings</p>\n            </div>\n          </div>\n          <p className=\"text-sm text-muted-foreground leading-relaxed\">\n            Journaling is a powerful tool for self-reflection and emotional processing. Write freely about your day, \n            track your mood, and explore your feelings in a safe, private space. Use the writing prompts to get started \n            or simply let your thoughts flow. Your journal entries are saved and can be reviewed anytime to track your \n            emotional journey and personal growth over time.\n          </p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {showPrompts && (\n            <div>\n              <label className=\"text-sm font-medium mb-3 block\" data-testid=\"text-prompts-label\">Writing Prompts</label>\n              <div className=\"flex flex-wrap gap-2\">\n                {writingPrompts.map((prompt, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePromptClick(prompt)}\n                    className=\"text-xs\"\n                    data-testid={`button-prompt-${index}`}\n                  >\n                    {prompt}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <div>\n            <label className=\"text-sm font-medium mb-3 block\" data-testid=\"text-mood-label\">How are you feeling today?</label>\n            <div className=\"flex gap-3\">\n              {moods.map((mood) => (\n                <Button\n                  key={mood.value}\n                  variant={selectedMood === mood.value ? 'default' : 'outline'}\n                  className=\"flex-1 flex items-center gap-2\"\n                  onClick={() => setSelectedMood(mood.value)}\n                  data-testid={`button-mood-${mood.value}`}\n                >\n                  <mood.icon className=\"w-5 h-5\" />\n                  {mood.label}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <Textarea\n              placeholder=\"What's on your mind today? Write freely about your thoughts, feelings, or experiences...\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              className=\"min-h-[200px]\"\n              data-testid=\"input-journal-content\"\n            />\n          </div>\n\n          <Button\n            onClick={handleSave}\n            disabled={!content.trim() || saved}\n            className=\"w-full\"\n            data-testid=\"button-save-journal\"\n          >\n            {saved ? 'Saved!' : 'Save Entry'}\n          </Button>\n        </div>\n      </Card>\n\n      {showPreviousEntries && (\n        <Card className=\"p-6\" data-testid=\"card-previous-entries\">\n          <h3 className=\"text-xl font-bold mb-4\" data-testid=\"text-previous-title\">Previous Entries</h3>\n          <ScrollArea className=\"h-[400px] pr-4\">\n            <div className=\"space-y-4\">\n              {previousEntries.map((entry) => (\n                <motion.div\n                  key={entry.id}\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className=\"p-4 bg-muted rounded-lg\"\n                  data-testid={`entry-${entry.id}`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      {getMoodIcon(entry.mood)}\n                      <span className=\"text-xs text-muted-foreground capitalize\">{entry.mood}</span>\n                    </div>\n                    <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                      <Calendar className=\"w-3 h-3\" />\n                      {entry.date}\n                    </div>\n                  </div>\n                  <p className=\"text-sm\">{entry.content}</p>\n                </motion.div>\n              ))}\n            </div>\n          </ScrollArea>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":7257},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/AuthPage.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useLocation } from 'wouter';\nimport { usePlan } from '@/contexts/PlanContext';\nimport kairoLogo from '@assets/Logo_Kairo_Final-removebg-preview_1761680007331.png';\nimport { ArrowLeft } from 'lucide-react';\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const { plan } = usePlan();\n  const [loginData, setLoginData] = useState({ email: '', password: '' });\n  const [signupData, setSignupData] = useState({ name: '', email: '', password: '' });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Login:', loginData);\n    const destination = plan === 'pro' ? '/pro' : plan === 'free' ? '/free' : '/select-plan';\n    setLocation(destination);\n  };\n\n  const handleSignup = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Signup:', signupData);\n    const destination = plan === 'pro' ? '/pro' : plan === 'free' ? '/free' : '/select-plan';\n    setLocation(destination);\n  };\n\n  return (\n    <div className=\"relative min-h-screen bg-gradient-to-br from-[#2d5a8f] via-[#4a7cb8] to-[#5d8fc9] flex items-start justify-center p-6 pt-20\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"w-full max-w-md relative\"\n      >\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation('/select-plan')}\n          className=\"absolute -left-2 top-0 text-white hover:bg-white/10 mb-4\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"w-5 h-5 mr-2\" />\n          Back\n        </Button>\n        <div className=\"text-center mb-8 mt-12\">\n          <img \n            src={kairoLogo} \n            alt=\"Kairo\" \n            className=\"w-24 h-24 mx-auto mb-4\"\n            data-testid=\"img-logo\"\n          />\n          <h1 className=\"text-3xl font-bold text-white mb-2\" data-testid=\"text-auth-title\">Welcome to Kairo</h1>\n          <p className=\"text-white/80\" data-testid=\"text-auth-subtitle\">Your journey to wellness begins here</p>\n        </div>\n\n        <Card className=\"p-6\">\n          <Tabs defaultValue=\"login\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n              <TabsTrigger value=\"signup\" data-testid=\"tab-signup\">Sign Up</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-email\">Email</Label>\n                  <Input\n                    id=\"login-email\"\n                    type=\"email\"\n                    placeholder=\"your@email.com\"\n                    value={loginData.email}\n                    onChange={(e) => setLoginData({ ...loginData, email: e.target.value })}\n                    required\n                    data-testid=\"input-login-email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-password\">Password</Label>\n                  <Input\n                    id=\"login-password\"\n                    type=\"password\"\n                    placeholder=\"••••••••\"\n                    value={loginData.password}\n                    onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                    required\n                    data-testid=\"input-login-password\"\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full\" data-testid=\"button-login\">\n                  Login\n                </Button>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"signup\">\n              <form onSubmit={handleSignup} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-name\">Name</Label>\n                  <Input\n                    id=\"signup-name\"\n                    type=\"text\"\n                    placeholder=\"Your full name\"\n                    value={signupData.name}\n                    onChange={(e) => setSignupData({ ...signupData, name: e.target.value })}\n                    required\n                    data-testid=\"input-signup-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-email\">Email</Label>\n                  <Input\n                    id=\"signup-email\"\n                    type=\"email\"\n                    placeholder=\"your@email.com\"\n                    value={signupData.email}\n                    onChange={(e) => setSignupData({ ...signupData, email: e.target.value })}\n                    required\n                    data-testid=\"input-signup-email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-password\">Password</Label>\n                  <Input\n                    id=\"signup-password\"\n                    type=\"password\"\n                    placeholder=\"••••••••\"\n                    value={signupData.password}\n                    onChange={(e) => setSignupData({ ...signupData, password: e.target.value })}\n                    required\n                    data-testid=\"input-signup-password\"\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full\" data-testid=\"button-signup\">\n                  Sign Up\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":6031},"client/src/components/examples/HealingCircle.tsx":{"content":"import HealingCircle from '../HealingCircle';\n\nexport default function HealingCircleExample() {\n  //todo: remove mock functionality\n  const circles = [\n    {\n      name: \"Anxiety Support Group\",\n      description: \"A supportive space to share experiences and coping strategies for anxiety.\",\n      schedule: \"Tuesdays, 7:00 PM IST\",\n      participants: 6,\n      maxParticipants: 10,\n    },\n    {\n      name: \"Mindfulness & Meditation\",\n      description: \"Learn and practice mindfulness techniques together.\",\n      schedule: \"Fridays, 6:30 PM IST\",\n      participants: 8,\n      maxParticipants: 12,\n      isJoined: true,\n    }\n  ];\n\n  return (\n    <div className=\"p-6 max-w-2xl space-y-4\">\n      {circles.map((circle, index) => (\n        <HealingCircle\n          key={index}\n          {...circle}\n          onJoin={() => console.log('Joined:', circle.name)}\n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":898},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/TherapistCard.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Calendar, Star, Award, Clock } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface TherapistCardProps {\n  name: string;\n  specialization: string;\n  bio: string;\n  rating: number;\n  reviews: number;\n  yearsExperience: number;\n  availability?: string;\n  canSchedule?: boolean;\n  onSchedule?: () => void;\n}\n\nexport default function TherapistCard({\n  name,\n  specialization,\n  bio,\n  rating,\n  reviews,\n  yearsExperience,\n  availability,\n  canSchedule = false,\n  onSchedule\n}: TherapistCardProps) {\n  const initials = name.split(' ').map(n => n[0]).join('');\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Card className=\"p-6 hover-elevate\" data-testid=\"card-therapist\">\n        <div className=\"flex gap-4\">\n          <Avatar className=\"w-16 h-16\" data-testid=\"avatar-therapist\">\n            <AvatarFallback className=\"bg-primary/10 text-primary text-lg font-semibold\">\n              {initials}\n            </AvatarFallback>\n          </Avatar>\n          \n          <div className=\"flex-1 space-y-3\">\n            <div>\n              <h3 className=\"text-lg font-bold mb-1\" data-testid=\"text-therapist-name\">{name}</h3>\n              <div className=\"flex flex-wrap items-center gap-2 mb-2\">\n                <Badge variant=\"secondary\" data-testid=\"badge-specialization\">{specialization}</Badge>\n                <div className=\"flex items-center gap-1 text-sm\">\n                  <Star className=\"w-4 h-4 fill-yellow-500 text-yellow-500\" />\n                  <span className=\"font-semibold\" data-testid=\"text-rating\">{rating.toFixed(1)}</span>\n                  <span className=\"text-muted-foreground\" data-testid=\"text-reviews\">({reviews} reviews)</span>\n                </div>\n                <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                  <Award className=\"w-4 h-4\" />\n                  <span data-testid=\"text-experience\">{yearsExperience} years</span>\n                </div>\n              </div>\n            </div>\n            \n            <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid=\"text-therapist-bio\">\n              {bio}\n            </p>\n            \n            {availability && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Clock className=\"w-4 h-4\" data-testid=\"icon-clock\" />\n                <span data-testid=\"text-availability\">{availability}</span>\n              </div>\n            )}\n\n            {canSchedule ? (\n              <Button\n                onClick={onSchedule}\n                className=\"w-full\"\n                data-testid=\"button-schedule\"\n              >\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                Schedule Session\n              </Button>\n            ) : (\n              <Button\n                onClick={onSchedule}\n                className=\"w-full\"\n                variant=\"outline\"\n                data-testid=\"button-pay-consult\"\n              >\n                Pay to Consult\n              </Button>\n            )}\n          </div>\n        </div>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":3422},"client/src/components/examples/JournalEntry.tsx":{"content":"import JournalEntry from '../JournalEntry';\n\nexport default function JournalEntryExample() {\n  return (\n    <div className=\"p-6 max-w-2xl\">\n      <JournalEntry onSave={(entry) => console.log('Journal saved:', entry)} />\n    </div>\n  );\n}\n","size_bytes":238},"client/src/components/DualOptionPage.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { useLocation } from 'wouter';\nimport { usePlan } from '@/contexts/PlanContext';\nimport therapistSession from '@assets/generated_images/Therapist_video_session_illustration_d3ba7d9c.png';\nimport counselorLaptop from '@assets/generated_images/Friendly_counselor_on_laptop_c61e16f3.png';\nimport { ArrowLeft } from 'lucide-react';\n\nexport default function DualOptionPage() {\n  const [, setLocation] = useLocation();\n  const { setPlan } = usePlan();\n  const [hoveredSide, setHoveredSide] = useState<'left' | 'right' | null>(null);\n\n  const handleProClick = () => {\n    setPlan('pro');\n    setLocation('/auth');\n  };\n\n  const handleFreeClick = () => {\n    setPlan('free');\n    setLocation('/auth');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background relative overflow-hidden\">\n      <div className=\"absolute top-8 left-8 z-20\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation('/')}\n          className=\"hover-elevate\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back\n        </Button>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 min-h-screen\">\n        <motion.div\n          initial={{ opacity: 0, x: -50 }}\n          animate={{ \n            opacity: 1, \n            x: hoveredSide === 'left' ? 0 : hoveredSide === 'right' ? -20 : 0,\n            scale: hoveredSide === 'left' ? 1.02 : hoveredSide === 'right' ? 0.98 : 1\n          }}\n          transition={{ duration: 0.4, ease: \"easeOut\" }}\n          onMouseEnter={() => setHoveredSide('left')}\n          onMouseLeave={() => setHoveredSide(null)}\n          className=\"bg-gradient-to-br from-[#2d5a8f] to-[#4a7cb8] flex items-center justify-center p-12 relative cursor-pointer\"\n        >\n          <div className=\"max-w-lg text-center text-white space-y-6 relative z-10\">\n            <motion.img \n              src={therapistSession} \n              alt=\"Therapist Session\" \n              className=\"w-full max-w-md mx-auto rounded-2xl shadow-2xl mb-8\"\n              animate={{ scale: hoveredSide === 'left' ? 1.05 : 1 }}\n              transition={{ duration: 0.3 }}\n              data-testid=\"img-therapist-session\"\n            />\n            <h2 className=\"text-4xl font-bold\" data-testid=\"text-pro-title\">\n              Regular consultations with experts of your choice\n            </h2>\n            <p className=\"text-xl text-white/90 font-light\" data-testid=\"text-pro-subtitle\">\n              Professional help, scheduled your way.\n            </p>\n            <Button\n              size=\"lg\"\n              onClick={handleProClick}\n              className=\"bg-white text-[#2d5a8f] hover:bg-white/90 text-lg px-10 py-6 rounded-full mt-8\"\n              data-testid=\"button-pro-start\"\n            >\n              Get Started with Pro\n            </Button>\n          </div>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, x: 50 }}\n          animate={{ \n            opacity: 1, \n            x: hoveredSide === 'right' ? 0 : hoveredSide === 'left' ? 20 : 0,\n            scale: hoveredSide === 'right' ? 1.02 : hoveredSide === 'left' ? 0.98 : 1\n          }}\n          transition={{ duration: 0.4, ease: \"easeOut\" }}\n          onMouseEnter={() => setHoveredSide('right')}\n          onMouseLeave={() => setHoveredSide(null)}\n          className=\"bg-gradient-to-br from-[#6fa8dc] to-[#8ec5e8] flex items-center justify-center p-12 relative cursor-pointer\"\n        >\n          <div className=\"max-w-lg text-center text-foreground space-y-6 relative z-10\">\n            <motion.img \n              src={counselorLaptop} \n              alt=\"Counselor\" \n              className=\"w-full max-w-md mx-auto rounded-2xl shadow-2xl mb-8\"\n              animate={{ scale: hoveredSide === 'right' ? 1.05 : 1 }}\n              transition={{ duration: 0.3 }}\n              data-testid=\"img-counselor\"\n            />\n            <h2 className=\"text-4xl font-bold\" data-testid=\"text-free-title\">\n              Free All-India Emergency Mental Health Helpline\n            </h2>\n            <p className=\"text-xl text-foreground/80 font-light\" data-testid=\"text-free-subtitle\">\n              Immediate help for anyone in need.\n            </p>\n            <Button\n              size=\"lg\"\n              onClick={handleFreeClick}\n              className=\"bg-[#2d5a8f] text-white hover:bg-[#2d5a8f]/90 text-lg px-10 py-6 rounded-full mt-8\"\n              data-testid=\"button-free-start\"\n            >\n              Get Started with Free\n            </Button>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4714},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/FreePlanDashboard.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { useLocation } from 'wouter';\nimport { usePlan } from '@/contexts/PlanContext';\nimport DailyTip from './DailyTip';\nimport EQAssessment from './EQAssessment';\nimport JournalEntry from './JournalEntry';\nimport AIVentRoom from './AIVentRoom';\nimport HealingCircle from './HealingCircle';\nimport TherapistCard from './TherapistCard';\nimport SessionBooking from './SessionBooking';\nimport CrisisSupport from './CrisisSupport';\nimport NotificationsCard from './NotificationsCard';\nimport CalendarView from './CalendarView';\nimport ProfileDashboard from './ProfileDashboard';\nimport Settings from './Settings';\nimport SessionConfirmation from './SessionConfirmation';\nimport Footer from './Footer';\nimport { Home, BookOpen, MessageCircle, Users, AlertCircle, Stethoscope, User, Settings as SettingsIcon, LogOut, Sparkles, Calendar, BookText, Brain } from 'lucide-react';\nimport newLogo from '@assets/Screenshot_2025-10-28_at_12.16.32_PM-removebg-preview_1761714308881.png';\n\nexport default function FreePlanDashboard() {\n  const [, setLocation] = useLocation();\n  const { setPlan } = usePlan();\n  const [hasCompletedEQ, setHasCompletedEQ] = useState(false);\n  const [activeTab, setActiveTab] = useState('home');\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [showProfile, setShowProfile] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showFreeSessionBooking, setShowFreeSessionBooking] = useState(false);\n  const [joinedCircles, setJoinedCircles] = useState<string[]>([]);\n  const [sessionConfirmation, setSessionConfirmation] = useState<{\n    therapistName: string;\n    date: string;\n    time: string;\n    notes?: string;\n  } | null>(null);\n\n  const handleLogout = () => {\n    setPlan(null);\n    setLocation('/');\n  };\n\n  const handleUpgrade = () => {\n    setPlan('pro');\n    setLocation('/pro');\n  };\n\n  const handleJoinCircle = (circleName: string) => {\n    if (joinedCircles.length < 1) {\n      setJoinedCircles([...joinedCircles, circleName]);\n      console.log('Joined circle:', circleName);\n    }\n  };\n\n  const handleFreeSessionBookingClick = () => {\n    setShowFreeSessionBooking(true);\n  };\n\n  const handleFreeSessionBookingSubmit = (booking: any) => {\n    const randomTherapist = therapists[Math.floor(Math.random() * therapists.length)];\n    setSessionConfirmation({\n      therapistName: randomTherapist.name,\n      date: booking.date,\n      time: booking.time,\n      notes: booking.notes || 'This is your complimentary first session. A therapist has been randomly assigned based on availability.'\n    });\n    setShowFreeSessionBooking(false);\n  };\n\n  //todo: remove mock functionality\n  const therapists = [\n    {\n      name: \"Dr. Sarah Patel\",\n      specialization: \"Anxiety & Depression\",\n      bio: \"Specializing in cognitive behavioral therapy with over 10 years of experience.\",\n      rating: 4.8,\n      reviews: 156,\n      yearsExperience: 12,\n      availability: \"Mon-Fri, 2-6 PM IST\",\n    },\n    {\n      name: \"Dr. Amit Kumar\",\n      specialization: \"Trauma & PTSD\",\n      bio: \"Expert in trauma-focused therapy and EMDR techniques.\",\n      rating: 4.7,\n      reviews: 98,\n      yearsExperience: 8,\n      availability: \"Tue-Sat, 10 AM-4 PM IST\",\n    },\n    {\n      name: \"Dr. Priya Sharma\",\n      specialization: \"Relationship Counseling\",\n      bio: \"Helping couples and individuals navigate relationship challenges.\",\n      rating: 4.9,\n      reviews: 203,\n      yearsExperience: 15,\n      availability: \"Wed-Sun, 3-8 PM IST\",\n    }\n  ];\n\n  const healingCircles = [\n    {\n      name: \"Anxiety Support Group\",\n      description: \"A supportive space to share experiences and coping strategies for managing anxiety.\",\n      schedule: \"Tuesdays, 7:00 PM IST\",\n      participants: 18,\n      maxParticipants: 25,\n    },\n    {\n      name: \"Depression Recovery Circle\",\n      description: \"Share experiences and support each other in the journey of recovery.\",\n      schedule: \"Thursdays, 8:00 PM IST\",\n      participants: 14,\n      maxParticipants: 20,\n    },\n    {\n      name: \"Mindfulness & Meditation\",\n      description: \"Learn and practice mindfulness techniques together in a peaceful group setting.\",\n      schedule: \"Fridays, 6:30 PM IST\",\n      participants: 22,\n      maxParticipants: 30,\n    },\n    {\n      name: \"Stress Management Workshop\",\n      description: \"Practical strategies for managing daily stress and building resilience.\",\n      schedule: \"Saturdays, 5:00 PM IST\",\n      participants: 16,\n      maxParticipants: 25,\n    },\n    {\n      name: \"Young Adults Support\",\n      description: \"A peer support group for young adults navigating life challenges.\",\n      schedule: \"Sundays, 4:00 PM IST\",\n      participants: 20,\n      maxParticipants: 25,\n    }\n  ];\n\n  const daysActive = 42;\n  const journalEntries = 24;\n\n  if (showSettings) {\n    return (\n      <div className=\"min-h-screen bg-background flex flex-col\">\n        <nav className=\"border-b bg-card sticky top-0 z-50\">\n          <div className=\"container mx-auto px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <img src={newLogo} alt=\"Kairo\" className=\"w-10 h-10\" />\n                <div>\n                  <h1 className=\"text-xl font-bold\">Kairo</h1>\n                  <p className=\"text-xs text-muted-foreground\">Free Plan</p>\n                </div>\n              </div>\n              <Button variant=\"ghost\" onClick={() => setShowSettings(false)}>\n                Back to Dashboard\n              </Button>\n            </div>\n          </div>\n        </nav>\n        <div className=\"container mx-auto px-6 py-8 flex-1\">\n          <Settings userName=\"Guest User\" userEmail=\"user@example.com\" />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (showProfile) {\n    return (\n      <div className=\"min-h-screen bg-background flex flex-col\">\n        <nav className=\"border-b bg-card sticky top-0 z-50\">\n          <div className=\"container mx-auto px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <img src={newLogo} alt=\"Kairo\" className=\"w-10 h-10\" />\n                <div>\n                  <h1 className=\"text-xl font-bold\">Kairo</h1>\n                  <p className=\"text-xs text-muted-foreground\">Free Plan</p>\n                </div>\n              </div>\n              <Button variant=\"ghost\" onClick={() => setShowProfile(false)}>\n                Back to Dashboard\n              </Button>\n            </div>\n          </div>\n        </nav>\n        <div className=\"container mx-auto px-6 py-8 flex-1\">\n          <ProfileDashboard userName=\"Guest User\" isPro={false} />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      {showCalendar && <CalendarView onClose={() => setShowCalendar(false)} />}\n\n      <nav className=\"border-b bg-card sticky top-0 z-50\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <img src={newLogo} alt=\"Kairo\" className=\"w-10 h-10\" data-testid=\"img-logo\" />\n              <div>\n                <h1 className=\"text-xl font-bold\" data-testid=\"text-app-title\">Kairo</h1>\n                <p className=\"text-xs text-muted-foreground\" data-testid=\"text-plan-type\">Free Plan</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Button variant=\"default\" onClick={handleUpgrade} data-testid=\"button-upgrade\">\n                <Sparkles className=\"w-4 h-4 mr-2\" />\n                Upgrade to Pro\n              </Button>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-profile-menu\">\n                    <User className=\"w-5 h-5\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={() => setShowProfile(true)} data-testid=\"menu-profile\">\n                    <User className=\"w-4 h-4 mr-2\" />\n                    Profile\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setShowSettings(true)} data-testid=\"menu-settings\">\n                    <SettingsIcon className=\"w-4 h-4 mr-2\" />\n                    Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout} data-testid=\"menu-logout\">\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"container mx-auto px-6 py-8 flex-1\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid grid-cols-7 w-full max-w-5xl mx-auto\">\n            <TabsTrigger value=\"home\" data-testid=\"tab-home\">\n              <Home className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Home</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"journal\" data-testid=\"tab-journal\">\n              <BookOpen className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Journal</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"vent\" data-testid=\"tab-vent\">\n              <MessageCircle className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Vent</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"circles\" data-testid=\"tab-circles\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Circles</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"crisis\" data-testid=\"tab-crisis\">\n              <AlertCircle className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Crisis</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"consultations\" data-testid=\"tab-consultations\">\n              <Stethoscope className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Consult</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"assessments\" data-testid=\"tab-assessments\" onClick={() => setLocation('/assessments')}>\n              <Brain className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Assessments</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"home\" className=\"space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"space-y-6\"\n            >\n              <div>\n                <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"text-welcome\">Welcome to Kairo</h2>\n                <p className=\"text-muted-foreground\" data-testid=\"text-welcome-subtitle\">Your journey to emotional wellness</p>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <Card className=\"p-6\" data-testid=\"card-days-active\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"bg-primary/10 p-3 rounded-lg\">\n                      <Calendar className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"text-3xl font-bold\" data-testid=\"text-days-count\">{daysActive}</p>\n                      <p className=\"text-sm text-muted-foreground\">Days Active</p>\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-6 cursor-pointer hover-elevate\" onClick={() => setActiveTab('journal')} data-testid=\"card-journal-entries\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"bg-primary/10 p-3 rounded-lg\">\n                      <BookText className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"text-3xl font-bold\" data-testid=\"text-entries-count\">{journalEntries}</p>\n                      <p className=\"text-sm text-muted-foreground\">Journal Entries</p>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n\n              <NotificationsCard onViewCalendar={() => setShowCalendar(true)} isPro={false} />\n\n              <DailyTip />\n\n              <Card className=\"p-6 bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-950/20 dark:to-blue-950/20 border-2 border-primary/20 hover-elevate cursor-pointer\" onClick={() => setLocation('/assessments')} data-testid=\"card-assessments\">\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-primary p-4 rounded-full\">\n                    <Brain className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-2xl font-bold mb-2\">Take Your Psychological Assessments</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Understand your current emotional state and emotional intelligence through scientifically validated assessments. \n                      Complete the PANAS Scale to check your mood, and explore the EIS-HPD test to discover your emotional intelligence.\n                    </p>\n                    <div className=\"flex items-center gap-2 text-primary font-semibold\">\n                      <span>Start Assessments</span>\n                      <span className=\"text-xl\">→</span>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            </motion.div>\n          </TabsContent>\n\n          <TabsContent value=\"journal\">\n            <JournalEntry\n              onSave={(entry) => console.log('Journal saved:', entry)}\n              showPrompts={false}\n              showPreviousEntries={true}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"vent\">\n            <AIVentRoom isPro={false} />\n          </TabsContent>\n\n          <TabsContent value=\"circles\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"text-circles-title\">Healing Circles</h2>\n              <p className=\"text-muted-foreground mb-4\" data-testid=\"text-circles-subtitle\">\n                Can join only 1 in free plan\n              </p>\n              <p className=\"text-sm text-muted-foreground leading-relaxed mb-4\">\n                Healing Circles are peer support groups where members share experiences, offer mutual support, and grow together. \n                These structured group sessions are facilitated by trained moderators and focus on specific topics like anxiety, \n                stress management, mindfulness, and more. Connect with others who understand your journey and find strength in community.\n              </p>\n              \n              <Card className=\"p-4 bg-muted/50\">\n                <h3 className=\"font-semibold text-lg mb-3 flex items-center gap-2\">\n                  <Users className=\"w-5 h-5 text-primary\" />\n                  Community Guidelines\n                </h3>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-primary mt-0.5\">•</span>\n                    <span><strong>Respect & Confidentiality:</strong> What's shared in the circle stays in the circle. Treat all members with respect and empathy.</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-primary mt-0.5\">•</span>\n                    <span><strong>Listen Actively:</strong> Give others your full attention. Everyone's experience is valid and deserves to be heard.</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-primary mt-0.5\">•</span>\n                    <span><strong>Share Thoughtfully:</strong> Share your experiences honestly, but avoid giving unsolicited advice. Use \"I\" statements.</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-primary mt-0.5\">•</span>\n                    <span><strong>No Judgment:</strong> Create a safe space free from criticism. Different perspectives and experiences are welcomed.</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-primary mt-0.5\">•</span>\n                    <span><strong>Be Present:</strong> Participate actively and arrive on time. Your presence matters to the community.</span>\n                  </li>\n                </ul>\n              </Card>\n            </div>\n            <div className=\"space-y-4\">\n              {healingCircles.map((circle, index) => (\n                <HealingCircle\n                  key={index}\n                  {...circle}\n                  isPro={false}\n                  isJoined={joinedCircles.includes(circle.name)}\n                  canJoinMore={joinedCircles.length < 1}\n                  onJoin={() => handleJoinCircle(circle.name)}\n                />\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"crisis\">\n            <CrisisSupport isPro={false} />\n          </TabsContent>\n\n          <TabsContent value=\"consultations\" className=\"space-y-6\">\n            <div className=\"mb-4\">\n              <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"text-consultations-title\">Paid Consultations</h2>\n              <p className=\"text-muted-foreground mb-4\" data-testid=\"text-consultations-subtitle\">\n                Professional Therapists - Connect with licensed mental health professionals. Choose your own therapist and schedule sessions at your convenience.\n              </p>\n              {showFreeSessionBooking ? (\n                <SessionBooking\n                  therapistName=\"One of our available therapists\"\n                  availability=\"Flexible scheduling available\"\n                  onBook={handleFreeSessionBookingSubmit}\n                  onCancel={() => setShowFreeSessionBooking(false)}\n                />\n              ) : (\n                <Card className=\"p-6 bg-primary/5\" data-testid=\"card-free-session\">\n                  <h3 className=\"font-semibold text-lg mb-2\">First Session Free!</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Your first therapy session is completely free. Choose your preferred date and time, and a therapist will be randomly assigned based on availability.\n                  </p>\n                  <Button onClick={handleFreeSessionBookingClick} data-testid=\"button-book-free\">Book Your Free Session</Button>\n                </Card>\n              )}\n            </div>\n\n            <div className=\"space-y-4\">\n              {therapists.map((therapist, index) => (\n                <TherapistCard\n                  key={index}\n                  {...therapist}\n                  canSchedule={false}\n                />\n              ))}\n            </div>\n\n            <Card className=\"p-6 bg-gradient-to-br from-primary/10 to-primary/5\" data-testid=\"card-pro-features\">\n              <h3 className=\"text-xl font-bold mb-3\">Pro Plan Features</h3>\n              <ul className=\"space-y-2 mb-4\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-1\">✓</span>\n                  <span>Choose your own therapist based on specialization and availability</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-1\">✓</span>\n                  <span>Schedule unlimited therapy sessions at discounted rates</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-1\">✓</span>\n                  <span>Message your therapist between sessions</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-primary mt-1\">✓</span>\n                  <span>Access to premium therapists and specialists</span>\n                </li>\n              </ul>\n              <Button onClick={handleUpgrade} data-testid=\"button-upgrade-consult\">\n                Pay to Consult\n              </Button>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {sessionConfirmation && (\n        <SessionConfirmation\n          therapistName={sessionConfirmation.therapistName}\n          date={sessionConfirmation.date}\n          time={sessionConfirmation.time}\n          notes={sessionConfirmation.notes}\n          onClose={() => setSessionConfirmation(null)}\n        />\n      )}\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":21780},"src/models/mood.ts":{"content":"import { Schema, model, Document, Types } from 'mongoose';\r\n\r\nexport interface IMood extends Document {\r\n    userId: Types.ObjectId;\r\n    score: number; // e.g., a score from 0 to 100\r\n    note?: string; // Optional notes from the user\r\n}\r\n\r\nconst moodSchema = new Schema<IMood>({\r\n    userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n    // We add validators to ensure the score is always within a valid range.\r\n    score: { type: Number, required: true, min: 0, max: 100 },\r\n    note: { type: String },\r\n}, { timestamps: true });\r\n\r\nexport const Mood = model<IMood>('Mood', moodSchema);","size_bytes":610},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/examples/LandingPage.tsx":{"content":"import LandingPage from '../LandingPage';\n\nexport default function LandingPageExample() {\n  return <LandingPage />;\n}\n","size_bytes":118},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"src/routes/auth.ts":{"content":"import { Router } from 'express';\r\nimport { registerUser, loginUser } from '../controllers/authController';\r\n\r\n// Create a new router instance. A router is like a mini-application,\r\n// capable only of performing routing and middleware functions.\r\nconst router = Router();\r\n\r\n// Define the route for user registration.\r\n// When a POST request is made to '/register', the 'registerUser' function from our controller will be executed.\r\nrouter.post('/register', registerUser);\r\n\r\n// Define the route for user login.\r\n// When a POST request is made to '/login', the 'loginUser' function from our controller will be executed.\r\nrouter.post('/login', loginUser);\r\n\r\n// Export the router so we can use it in our main index.ts file.\r\nexport default router;\r\n","size_bytes":748},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"src/models/activity.ts":{"content":"\r\nimport { Schema, model, Document, Types } from 'mongoose';\r\n\r\nexport interface IActivity extends Document {\r\n    userId: Types.ObjectId;\r\n    type: 'meditation' | 'exercise' | 'journaling' | 'other';\r\n    name: string;\r\n    duration?: number; // Duration in minutes\r\n    description?: string;\r\n}\r\n\r\nconst activitySchema = new Schema<IActivity>({\r\n    userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n    // 'enum' is a validator that ensures the 'type' field can only be one\r\n    // of the values in the array. This keeps our data clean and consistent.\r\n    type: { type: String, required: true, enum: ['meditation', 'exercise', 'journaling', 'other'] },\r\n    name: { type: String, required: true },\r\n    duration: { type: Number },\r\n    description: { type: String },\r\n}, { timestamps: true });\r\n\r\nexport const Activity = model<IActivity>('Activity', activitySchema);\r\n","size_bytes":894},"client/src/components/examples/FreePlanDashboard.tsx":{"content":"import FreePlanDashboard from '../FreePlanDashboard';\nimport { PlanProvider } from '@/contexts/PlanContext';\n\nexport default function FreePlanDashboardExample() {\n  return (\n    <PlanProvider>\n      <FreePlanDashboard />\n    </PlanProvider>\n  );\n}\n","size_bytes":248},"client/src/components/examples/TherapistCard.tsx":{"content":"import TherapistCard from '../TherapistCard';\n\nexport default function TherapistCardExample() {\n  //todo: remove mock functionality\n  const therapists = [\n    {\n      name: \"Dr. Sarah Patel\",\n      specialization: \"Anxiety & Depression\",\n      bio: \"Specializing in cognitive behavioral therapy with over 10 years of experience helping clients manage anxiety and depression.\",\n      availability: \"Mon-Fri, 2-6 PM IST\",\n      canSchedule: true,\n    },\n    {\n      name: \"Dr. Amit Kumar\",\n      specialization: \"Trauma & PTSD\",\n      bio: \"Expert in trauma-focused therapy and EMDR. Compassionate approach to healing from traumatic experiences.\",\n      availability: \"Tue-Sat, 10 AM-4 PM IST\",\n      canSchedule: false,\n    }\n  ];\n\n  return (\n    <div className=\"p-6 max-w-2xl space-y-4\">\n      {therapists.map((therapist, index) => (\n        <TherapistCard\n          key={index}\n          {...therapist}\n          onSchedule={() => console.log('Schedule with:', therapist.name)}\n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":1018},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/MoodTracker.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Heart, TrendingUp, Sparkles } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { LineChart, Line, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\n\nconst timeOptions = ['Other', 'Yesterday', 'Today'];\nconst moodOptions = [\n  { label: 'Great', emoji: '😊', color: 'bg-emerald-300', gradient: 'from-emerald-200 to-emerald-300', value: 'great', score: 5 },\n  { label: 'Good', emoji: '🙂', color: 'bg-teal-300', gradient: 'from-teal-200 to-teal-300', value: 'good', score: 4 },\n  { label: 'Okay', emoji: '😐', color: 'bg-amber-200', gradient: 'from-amber-100 to-amber-200', value: 'okay', score: 3 },\n  { label: 'Bad', emoji: '😔', color: 'bg-orange-300', gradient: 'from-orange-200 to-orange-300', value: 'bad', score: 2 },\n  { label: 'Awful', emoji: '😢', color: 'bg-rose-300', gradient: 'from-rose-200 to-rose-300', value: 'awful', score: 1 },\n];\n\nconst socialContextOptions = [\n  { label: 'Myself', emoji: '👤' },\n  { label: 'People I don\\'t know', emoji: '👥' },\n  { label: 'Close Family', emoji: '👨‍👩‍👧‍👦' },\n  { label: 'Extended Family', emoji: '👪' },\n  { label: 'Friends', emoji: '👯' },\n  { label: 'Coworkers', emoji: '💼' },\n  { label: 'Partner', emoji: '💑' },\n  { label: 'Dog', emoji: '🐕' },\n  { label: 'Team', emoji: '⚽' },\n  { label: 'Club', emoji: '🎭' },\n];\n\nconst locationOptions = [\n  { label: 'Home', emoji: '🏠' },\n  { label: 'Work', emoji: '💼' },\n  { label: 'Place of study', emoji: '🎓' },\n  { label: 'Transport', emoji: '🚗' },\n  { label: 'Gym activity', emoji: '🏋️' },\n  { label: 'Bar / restaurant', emoji: '🍽️' },\n];\n\ninterface MoodEntry {\n  id: number;\n  mood: string;\n  note: string;\n  date: string;\n  time: string;\n}\n\nexport default function MoodTracker() {\n  const [step, setStep] = useState(1);\n  const [selectedTime, setSelectedTime] = useState('Today');\n  const [selectedMood, setSelectedMood] = useState('');\n  const [selectedContext, setSelectedContext] = useState<string[]>([]);\n  const [selectedLocation, setSelectedLocation] = useState<string[]>([]);\n  const [note, setNote] = useState('');\n  const [saved, setSaved] = useState(false);\n\n  const [moodHistory] = useState<MoodEntry[]>([\n    { id: 1, mood: 'good', note: 'Had a productive meeting at work', date: 'Oct 27', time: '2:30 PM' },\n    { id: 2, mood: 'okay', note: 'Feeling a bit tired but managing', date: 'Oct 27', time: '10:15 AM' },\n    { id: 3, mood: 'great', note: 'Morning meditation helped me feel centered', date: 'Oct 26', time: '8:00 AM' },\n    { id: 4, mood: 'bad', note: 'Struggling with some anxiety', date: 'Oct 25', time: '6:45 PM' },\n    { id: 5, mood: 'good', note: 'Nice walk in the park', date: 'Oct 24', time: '5:00 PM' },\n    { id: 6, mood: 'great', note: 'Achieved my goals for the day', date: 'Oct 23', time: '7:30 PM' },\n    { id: 7, mood: 'okay', note: 'Just an average day', date: 'Oct 22', time: '12:00 PM' },\n  ]);\n\n  const handleSave = () => {\n    if (selectedMood) {\n      console.log('Mood logged:', { mood: selectedMood, context: selectedContext, location: selectedLocation, note, time: selectedTime });\n      setSaved(true);\n      setTimeout(() => {\n        setSelectedMood('');\n        setSelectedContext([]);\n        setSelectedLocation([]);\n        setNote('');\n        setStep(1);\n        setSaved(false);\n      }, 2000);\n    }\n  };\n\n  const handleNext = () => {\n    if (step < 3) {\n      setStep(step + 1);\n    } else {\n      handleSave();\n    }\n  };\n\n  const toggleContext = (context: string) => {\n    setSelectedContext(prev =>\n      prev.includes(context)\n        ? prev.filter(c => c !== context)\n        : [...prev, context]\n    );\n  };\n\n  const toggleLocation = (location: string) => {\n    setSelectedLocation(prev =>\n      prev.includes(location)\n        ? prev.filter(l => l !== location)\n        : [...prev, location]\n    );\n  };\n\n  const getMoodData = (moodValue: string) => {\n    return moodOptions.find(m => m.value === moodValue);\n  };\n\n  const currentMoodData = moodOptions.find(m => m.value === selectedMood);\n\n  const chartData = [...moodHistory].reverse().map((entry) => ({\n    date: entry.date,\n    score: moodOptions.find(m => m.value === entry.mood)?.score || 3,\n    mood: entry.mood,\n  }));\n\n  const moodDistribution = moodOptions.map((mood) => ({\n    name: mood.label,\n    value: moodHistory.filter(entry => entry.mood === mood.value).length,\n    color: mood.color,\n  })).filter(item => item.value > 0);\n\n  const COLORS = ['#6ee7b7', '#5eead4', '#fde68a', '#fdba74', '#fda4af'];\n\n  const getBackgroundGradient = () => {\n    if (!currentMoodData) return 'from-background to-muted/30';\n    switch (selectedMood) {\n      case 'great': return 'from-emerald-200/20 via-emerald-100/10 to-background';\n      case 'good': return 'from-teal-200/20 via-teal-100/10 to-background';\n      case 'okay': return 'from-amber-100/20 via-amber-50/10 to-background';\n      case 'bad': return 'from-orange-200/20 via-orange-100/10 to-background';\n      case 'awful': return 'from-rose-200/20 via-rose-100/10 to-background';\n      default: return 'from-background to-muted/30';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <motion.div\n        animate={{\n          background: currentMoodData ? `linear-gradient(to bottom, ${getBackgroundGradient()})` : undefined\n        }}\n        transition={{ duration: 0.5 }}\n        className={`bg-gradient-to-b ${getBackgroundGradient()} rounded-2xl`}\n      >\n        <Card className=\"p-6 bg-transparent border-none shadow-none\" data-testid=\"card-mood-tracker\">\n          <div className=\"mb-6\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              <motion.div \n                className={`p-3 rounded-lg ${currentMoodData ? currentMoodData.color : 'bg-primary/10'}`}\n                animate={{\n                  scale: currentMoodData ? [1, 1.1, 1] : 1,\n                }}\n                transition={{ duration: 0.5 }}\n              >\n                <Heart className=\"w-6 h-6 text-white\" data-testid=\"icon-heart\" />\n              </motion.div>\n              <div>\n                <h2 className=\"text-2xl font-bold\" data-testid=\"text-mood-title\">Track Your Mood</h2>\n                <p className=\"text-muted-foreground\" data-testid=\"text-mood-subtitle\">\n                  {currentMoodData ? `Feeling ${currentMoodData.label} today!` : 'Log how you\\'re feeling throughout the day'}\n                </p>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground leading-relaxed\">\n              Tracking your mood helps you recognize emotional patterns and triggers over time. Log how you're feeling \n              right now, add optional notes about what's influencing your emotions, and build a history of your emotional \n              well-being. Regular mood tracking provides valuable insights into your mental health journey and helps you \n              identify what makes you feel your best.\n            </p>\n          </div>\n\n          <AnimatePresence mode=\"wait\">\n            <motion.div\n              key={step}\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n              transition={{ duration: 0.3 }}\n              className=\"space-y-8\"\n            >\n              {/* Step 1: Rate your mood */}\n              {step === 1 && (\n                <>\n                  <div className=\"text-center\">\n                    <h3 className=\"text-xl font-semibold mb-6\">Rate your mood</h3>\n                    \n                    {/* Time selector */}\n                    <div className=\"flex justify-center gap-2 mb-8\">\n                      {timeOptions.map((time) => (\n                        <Button\n                          key={time}\n                          variant={selectedTime === time ? 'default' : 'outline'}\n                          onClick={() => setSelectedTime(time)}\n                          className=\"min-w-24\"\n                          size=\"sm\"\n                        >\n                          {time}\n                        </Button>\n                      ))}\n                    </div>\n\n                    {/* Large mood emoji display with animated background */}\n                    <motion.div \n                      className=\"flex justify-center mb-8\"\n                      animate={{\n                        scale: currentMoodData ? [1, 1.05, 1] : 1,\n                      }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <div className={`w-56 h-56 flex items-center justify-center rounded-full shadow-2xl bg-gradient-to-br ${currentMoodData ? currentMoodData.gradient : 'from-muted to-muted/50'}`}>\n                        <span className=\"text-9xl filter drop-shadow-lg\">\n                          {currentMoodData ? currentMoodData.emoji : '😐'}\n                        </span>\n                      </div>\n                    </motion.div>\n\n                    {/* Mood buttons with enhanced styling */}\n                    <div className=\"grid grid-cols-5 gap-3 max-w-2xl mx-auto\">\n                      {moodOptions.map((mood) => (\n                        <motion.button\n                          key={mood.value}\n                          onClick={() => setSelectedMood(mood.value)}\n                          whileHover={{ scale: 1.05 }}\n                          whileTap={{ scale: 0.95 }}\n                          className={`flex flex-col items-center gap-2 p-4 rounded-2xl transition-all shadow-md ${\n                            selectedMood === mood.value\n                              ? `bg-gradient-to-br ${mood.gradient} text-white shadow-lg ring-4 ring-offset-2 ring-offset-background ring-${mood.color.split('-')[1]}-300`\n                              : 'bg-card hover:bg-accent border-2 border-border'\n                          }`}\n                          data-testid={`button-mood-${mood.value}`}\n                        >\n                          <span className=\"text-3xl filter drop-shadow\">{mood.emoji}</span>\n                          <span className=\"text-sm font-semibold\">{mood.label}</span>\n                        </motion.button>\n                      ))}\n                    </div>\n                  </div>\n                </>\n              )}\n\n              {/* Step 2: Who were you with? */}\n              {step === 2 && (\n                <div>\n                  <h3 className=\"text-xl font-semibold mb-6 text-center\">Who were you with?</h3>\n                  <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 max-w-3xl mx-auto\">\n                    {socialContextOptions.map((context) => (\n                      <motion.button\n                        key={context.label}\n                        onClick={() => toggleContext(context.label)}\n                        whileHover={{ scale: 1.03 }}\n                        whileTap={{ scale: 0.97 }}\n                        className={`flex flex-col items-center gap-2 p-4 rounded-xl transition-all border-2 shadow-sm ${\n                          selectedContext.includes(context.label)\n                            ? `bg-gradient-to-br ${currentMoodData?.gradient || 'from-primary to-primary/80'} text-white border-transparent shadow-lg`\n                            : 'bg-card border-muted hover:border-primary/50 hover:bg-accent'\n                        }`}\n                      >\n                        <span className=\"text-3xl filter drop-shadow\">{context.emoji}</span>\n                        <span className=\"text-xs font-medium text-center\">{context.label}</span>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Step 3: Where were you? */}\n              {step === 3 && (\n                <div>\n                  <h3 className=\"text-xl font-semibold mb-6 text-center\">Where were you?</h3>\n                  <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-3 max-w-2xl mx-auto\">\n                    {locationOptions.map((location) => (\n                      <motion.button\n                        key={location.label}\n                        onClick={() => toggleLocation(location.label)}\n                        whileHover={{ scale: 1.03 }}\n                        whileTap={{ scale: 0.97 }}\n                        className={`flex flex-col items-center gap-2 p-4 rounded-xl transition-all border-2 shadow-sm ${\n                          selectedLocation.includes(location.label)\n                            ? `bg-gradient-to-br ${currentMoodData?.gradient || 'from-primary to-primary/80'} text-white border-transparent shadow-lg`\n                            : 'bg-card border-muted hover:border-primary/50 hover:bg-accent'\n                        }`}\n                      >\n                        <span className=\"text-3xl filter drop-shadow\">{location.emoji}</span>\n                        <span className=\"text-sm font-medium text-center\">{location.label}</span>\n                      </motion.button>\n                    ))}\n                  </div>\n\n                  <div className=\"mt-8 max-w-xl mx-auto\">\n                    <label className=\"text-sm font-medium mb-2 block\">Additional notes (optional)</label>\n                    <Textarea\n                      placeholder=\"What contributed to this mood?\"\n                      value={note}\n                      onChange={(e) => setNote(e.target.value)}\n                      className=\"min-h-[100px] bg-card/50 backdrop-blur-sm\"\n                      data-testid=\"input-mood-note\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              {/* Navigation buttons */}\n              <div className=\"flex gap-3 pt-6 max-w-xl mx-auto\">\n                {step > 1 && (\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setStep(step - 1)}\n                    className=\"flex-1 h-14 text-lg\"\n                    size=\"lg\"\n                  >\n                    BACK\n                  </Button>\n                )}\n                <Button\n                  onClick={handleNext}\n                  disabled={(step === 1 && !selectedMood) || saved}\n                  className={`flex-1 h-14 text-lg font-semibold bg-gradient-to-r ${currentMoodData?.gradient || 'from-primary to-primary/90'} hover:opacity-90`}\n                  size=\"lg\"\n                  data-testid=\"button-save-mood\"\n                >\n                  {saved ? '✓ SAVED!' : step === 3 ? 'SAVE' : 'NEXT'}\n                </Button>\n              </div>\n\n              {/* Step indicator */}\n              <div className=\"flex justify-center gap-2 pt-4\">\n                {[1, 2, 3].map((s) => (\n                  <div\n                    key={s}\n                    className={`h-2 rounded-full transition-all ${\n                      s === step \n                        ? `w-8 ${currentMoodData ? currentMoodData.color : 'bg-primary'}` \n                        : 'w-2 bg-muted'\n                    }`}\n                  />\n                ))}\n              </div>\n            </motion.div>\n          </AnimatePresence>\n        </Card>\n      </motion.div>\n\n      {/* Mood Analytics Section */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Mood Trend Graph */}\n        <Card className=\"p-6\" data-testid=\"card-mood-trend\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"bg-gradient-to-br from-blue-300 to-purple-300 p-3 rounded-lg\">\n              <TrendingUp className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"text-xl font-bold\" data-testid=\"text-trend-title\">Mood Trend</h3>\n              <p className=\"text-sm text-muted-foreground\">Your emotional journey over time</p>\n            </div>\n          </div>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <AreaChart data={chartData}>\n              <defs>\n                <linearGradient id=\"colorMood\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#a78bfa\" stopOpacity={0.6}/>\n                  <stop offset=\"95%\" stopColor=\"#a78bfa\" stopOpacity={0.1}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" opacity={0.5} />\n              <XAxis \n                dataKey=\"date\" \n                stroke=\"#6b7280\"\n                style={{ fontSize: '12px' }}\n              />\n              <YAxis \n                domain={[0, 5]} \n                ticks={[1, 2, 3, 4, 5]}\n                stroke=\"#6b7280\"\n                style={{ fontSize: '12px' }}\n              />\n              <Tooltip \n                contentStyle={{ \n                  backgroundColor: 'hsl(var(--card))', \n                  border: '1px solid hsl(var(--border))',\n                  borderRadius: '8px',\n                  boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1)'\n                }}\n                formatter={(value: number) => {\n                  const mood = moodOptions.find(m => m.score === value);\n                  return [mood?.label || 'Unknown', 'Mood'];\n                }}\n              />\n              <Area \n                type=\"monotone\" \n                dataKey=\"score\" \n                stroke=\"#a78bfa\" \n                strokeWidth={2}\n                fillOpacity={1} \n                fill=\"url(#colorMood)\" \n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </Card>\n\n        {/* Mood Distribution */}\n        <Card className=\"p-6\" data-testid=\"card-mood-distribution\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"bg-gradient-to-br from-pink-300 to-rose-300 p-3 rounded-lg\">\n              <Sparkles className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"text-xl font-bold\">Mood Distribution</h3>\n              <p className=\"text-sm text-muted-foreground\">Your overall emotional balance</p>\n            </div>\n          </div>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <PieChart>\n              <Pie\n                data={moodDistribution}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n              >\n                {moodDistribution.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip \n                contentStyle={{ \n                  backgroundColor: 'hsl(var(--card))', \n                  border: '1px solid hsl(var(--border))',\n                  borderRadius: '8px'\n                }}\n              />\n            </PieChart>\n          </ResponsiveContainer>\n          <div className=\"grid grid-cols-2 gap-2 mt-4\">\n            {moodDistribution.map((item, index) => (\n              <div key={index} className=\"flex items-center gap-2\">\n                <div \n                  className={`w-3 h-3 rounded-full`} \n                  style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                />\n                <span className=\"text-sm text-muted-foreground\">{item.name}: {item.value}</span>\n              </div>\n            ))}\n          </div>\n        </Card>\n      </div>\n\n      {/* Recent Mood History with Enhanced Cards */}\n      <Card className=\"p-6\" data-testid=\"card-mood-history\">\n        <h3 className=\"text-xl font-bold mb-6 flex items-center gap-2\" data-testid=\"text-history-title\">\n          <Heart className=\"w-5 h-5 text-primary\" />\n          Recent Mood History\n        </h3>\n        <div className=\"grid sm:grid-cols-2 gap-4\">\n          {moodHistory.map((entry) => {\n            const moodData = getMoodData(entry.mood);\n            return (\n              <motion.div\n                key={entry.id}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                whileHover={{ scale: 1.02, y: -2 }}\n                className={`p-4 rounded-xl bg-gradient-to-br ${moodData?.gradient || 'from-muted to-muted/50'} shadow-md hover:shadow-lg transition-all`}\n                data-testid={`mood-entry-${entry.id}`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"text-4xl filter drop-shadow-lg\">{moodData?.emoji}</span>\n                    <div>\n                      <span className=\"font-bold text-gray-800 text-lg capitalize\">{entry.mood}</span>\n                      <p className=\"text-xs text-gray-700\">{entry.date} at {entry.time}</p>\n                    </div>\n                  </div>\n                </div>\n                {entry.note && (\n                  <p className=\"text-sm text-gray-700 mt-2 bg-white/30 rounded-lg p-2\">\n                    {entry.note}\n                  </p>\n                )}\n              </motion.div>\n            );\n          })}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":21494},"client/src/components/AIVentRoom.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { MessageCircle, Send } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface Message {\n  id: number;\n  text: string;\n  sender: 'user' | 'ai';\n  timestamp: Date;\n}\n\ninterface AIVentRoomProps {\n  isPro?: boolean;\n}\n\nexport default function AIVentRoom({ isPro = false }: AIVentRoomProps) {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: 1,\n      text: \"Hello! I'm here to listen. Feel free to share what's on your mind.\",\n      sender: 'ai',\n      timestamp: new Date()\n    }\n  ]);\n  const [input, setInput] = useState('');\n\n  const handleSend = () => {\n    if (!input.trim()) return;\n\n    const userMessage: Message = {\n      id: messages.length + 1,\n      text: input,\n      sender: 'user',\n      timestamp: new Date()\n    };\n\n    setMessages([...messages, userMessage]);\n    setInput('');\n\n    setTimeout(() => {\n      const aiResponse: Message = {\n        id: messages.length + 2,\n        text: \"I hear you. That sounds challenging. Remember, it's okay to feel this way, and you're taking a positive step by sharing. Would you like to talk more about this?\",\n        sender: 'ai',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiResponse]);\n    }, 1000);\n  };\n\n  return (\n    <Card className=\"p-6 flex flex-col h-[600px]\" data-testid=\"card-ai-chat\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center gap-3 mb-3\">\n          <div className=\"bg-primary/10 p-3 rounded-lg\">\n            <MessageCircle className=\"w-6 h-6 text-primary\" data-testid=\"icon-message\" />\n          </div>\n          <div>\n            <h2 className=\"text-2xl font-bold\" data-testid=\"text-chat-title\">\n              {isPro ? 'AI Consoling Agent' : 'AI Vent Room'}\n            </h2>\n            <p className=\"text-muted-foreground text-sm\" data-testid=\"text-chat-subtitle\">\n              {isPro ? 'Unlimited conversations with your AI companion' : 'A safe space to express yourself'}\n            </p>\n          </div>\n        </div>\n        <p className=\"text-sm text-muted-foreground leading-relaxed\">\n          {isPro \n            ? 'Your AI companion is here to listen without judgment, 24/7. Share your thoughts, feelings, and concerns in a completely private and supportive environment. The AI responds with empathy and understanding, helping you process emotions and gain perspective. This is a safe space to express yourself freely, anytime you need support.'\n            : 'Sometimes you just need to vent. This AI-powered space provides a judgment-free zone where you can express your thoughts and feelings freely. Share what\\'s on your mind, and receive empathetic, supportive responses. This is your personal emotional outlet, available whenever you need it.'\n          }\n        </p>\n      </div>\n\n      <ScrollArea className=\"flex-1 pr-4 mb-4\">\n        <AnimatePresence>\n          {messages.map((message) => (\n            <motion.div\n              key={message.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              className={`mb-4 flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n              data-testid={`message-${message.id}`}\n            >\n              <div\n                className={`max-w-[80%] rounded-2xl px-4 py-3 ${\n                  message.sender === 'user'\n                    ? 'bg-primary text-primary-foreground'\n                    : 'bg-muted'\n                }`}\n              >\n                <p className=\"text-sm\">{message.text}</p>\n              </div>\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </ScrollArea>\n\n      <div className=\"flex gap-2\">\n        <Input\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n          placeholder=\"Type your message...\"\n          data-testid=\"input-message\"\n        />\n        <Button\n          onClick={handleSend}\n          disabled={!input.trim()}\n          size=\"icon\"\n          data-testid=\"button-send\"\n        >\n          <Send className=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4403},"client/src/components/TherapistMatchingQuestionnaire.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Progress } from '@/components/ui/progress';\nimport { ArrowLeft, ArrowRight, Sparkles, Users, Check } from 'lucide-react';\nimport Footer from './Footer';\nimport TherapistCard from './TherapistCard';\nimport newLogo from '@assets/Screenshot_2025-10-28_at_12.16.32_PM-removebg-preview_1761714308881.png';\n\ninterface MatchingAnswers {\n  sessionType: string[];\n  availability: string[];\n  concernsAreas: string[];\n  priorTherapy: string;\n  therapistApproach: string;\n  focusArea: string;\n  genderPreference: string;\n}\n\nconst steps = [\n  {\n    id: 1,\n    title: 'The Basics',\n    subtitle: 'Practical Needs',\n    description: 'This section is for the non-negotiables.'\n  },\n  {\n    id: 2,\n    title: \"What's on your mind?\",\n    subtitle: 'Areas of Focus',\n    description: 'This helps us understand what you\\'d like to work on.'\n  },\n  {\n    id: 3,\n    title: 'Your Therapy Style',\n    subtitle: 'Your Vibe',\n    description: 'This helps us match you with a therapist\\'s approach.'\n  },\n  {\n    id: 4,\n    title: 'Therapist Preferences',\n    subtitle: 'Your Match',\n    description: 'This is about who you feel most comfortable with. It\\'s 100% optional.'\n  }\n];\n\nexport default function TherapistMatchingQuestionnaire() {\n  const [, setLocation] = useLocation();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [answers, setAnswers] = useState<MatchingAnswers>({\n    sessionType: [],\n    availability: [],\n    concernsAreas: [],\n    priorTherapy: '',\n    therapistApproach: '',\n    focusArea: '',\n    genderPreference: ''\n  });\n\n  const matchedTherapists = [\n    {\n      name: \"Dr. Sarah Patel\",\n      specialization: \"CBT & Anxiety Specialist\",\n      bio: \"Specializing in cognitive behavioral therapy with over 10 years of experience helping clients manage anxiety and depression. Expert in evidence-based techniques for lasting change.\",\n      rating: 4.8,\n      reviews: 156,\n      yearsExperience: 12,\n      availability: \"Mon-Fri, 2-6 PM IST\",\n      matchScore: 95\n    },\n    {\n      name: \"Dr. Amit Kumar\",\n      specialization: \"Trauma & PTSD\",\n      bio: \"Expert in trauma-focused therapy and EMDR techniques for healing from traumatic experiences. Compassionate approach with proven success in complex trauma cases.\",\n      rating: 4.7,\n      reviews: 98,\n      yearsExperience: 8,\n      availability: \"Tue-Sat, 10 AM-4 PM IST\",\n      matchScore: 92\n    },\n    {\n      name: \"Dr. Priya Sharma\",\n      specialization: \"Relationship Counseling\",\n      bio: \"Helping couples and individuals navigate relationship challenges with evidence-based approaches. Warm, supportive style focused on communication and emotional connection.\",\n      rating: 4.9,\n      reviews: 203,\n      yearsExperience: 15,\n      availability: \"Wed-Sun, 3-8 PM IST\",\n      matchScore: 88\n    },\n    {\n      name: \"Dr. Rajesh Mehta\",\n      specialization: \"Stress & Burnout\",\n      bio: \"Specializing in stress management and preventing burnout in high-pressure environments. Practical strategies for work-life balance and resilience.\",\n      rating: 4.6,\n      reviews: 87,\n      yearsExperience: 10,\n      availability: \"Mon-Wed, 5-9 PM IST\",\n      matchScore: 85\n    }\n  ];\n\n  const handleCheckboxChange = (field: keyof MatchingAnswers, value: string, checked: boolean) => {\n    setAnswers(prev => ({\n      ...prev,\n      [field]: checked\n        ? [...(prev[field] as string[]), value]\n        : (prev[field] as string[]).filter(v => v !== value)\n    }));\n  };\n\n  const handleRadioChange = (field: keyof MatchingAnswers, value: string) => {\n    setAnswers(prev => ({ ...prev, [field]: value }));\n  };\n\n  const canProceed = () => {\n    switch (currentStep) {\n      case 0:\n        return answers.sessionType.length > 0 && answers.availability.length > 0;\n      case 1:\n        return answers.concernsAreas.length > 0 && answers.priorTherapy !== '';\n      case 2:\n        return answers.therapistApproach !== '' && answers.focusArea !== '';\n      case 3:\n        return answers.genderPreference !== '';\n      default:\n        return false;\n    }\n  };\n\n  const handleNext = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  };\n\n  const handleSubmit = () => {\n    console.log('Matching answers:', answers);\n    setShowResults(true);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const progress = ((currentStep + 1) / steps.length) * 100;\n\n  // Show results page after submission\n  if (showResults) {\n    return (\n      <div className=\"min-h-screen bg-background flex flex-col\">\n        <nav className=\"border-b bg-card sticky top-0 z-50\">\n          <div className=\"container mx-auto px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <img src={newLogo} alt=\"Kairo\" className=\"w-10 h-10\" />\n                <div>\n                  <h1 className=\"text-xl font-bold\">Kairo</h1>\n                  <p className=\"text-xs text-muted-foreground\">Your Matched Therapists</p>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                onClick={() => setLocation('/pro?tab=therapists')}\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </div>\n          </div>\n        </nav>\n\n        <div className=\"container mx-auto px-6 py-12 flex-1 max-w-5xl\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"text-center mb-12\"\n          >\n            <div className=\"inline-flex items-center justify-center bg-green-500/10 p-4 rounded-full mb-4\">\n              <Check className=\"w-8 h-8 text-green-500\" />\n            </div>\n            <h1 className=\"text-4xl font-bold mb-3\">Great! We Found Your Matches</h1>\n            <p className=\"text-xl text-muted-foreground mb-2\">\n              Based on your preferences, here are your top therapist matches\n            </p>\n            <p className=\"text-sm text-muted-foreground max-w-2xl mx-auto\">\n              These therapists have been carefully selected based on your concerns, availability, and therapy style preferences. \n              Each match score reflects how well they align with your needs.\n            </p>\n          </motion.div>\n\n          <div className=\"space-y-6\">\n            {matchedTherapists.map((therapist, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n                className=\"relative\"\n              >\n                <div className=\"absolute -left-4 top-6 bg-primary text-primary-foreground rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold z-10\">\n                  #{index + 1}\n                </div>\n                <Card className=\"border-2 hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <TherapistCard\n                          {...therapist}\n                          canSchedule={true}\n                          onSchedule={() => {\n                            setLocation('/pro?tab=therapists');\n                          }}\n                        />\n                      </div>\n                      <div className=\"ml-4 text-center\">\n                        <div className=\"bg-primary/10 rounded-lg p-3\">\n                          <div className=\"text-3xl font-bold text-primary\">{therapist.matchScore}%</div>\n                          <div className=\"text-xs text-muted-foreground mt-1\">Match</div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n\n          <Card className=\"mt-12 bg-primary/5 border-primary/20\">\n            <CardContent className=\"p-8 text-center\">\n              <h3 className=\"text-2xl font-bold mb-3\">Ready to Start Your Journey?</h3>\n              <p className=\"text-muted-foreground mb-6 max-w-2xl mx-auto\">\n                Schedule a session with any of these matched therapists by clicking \"Schedule Session\" on their card. \n                Your first consultation will help determine the best fit for your therapeutic journey.\n              </p>\n              <div className=\"flex gap-4 justify-center flex-wrap\">\n                <Button size=\"lg\" onClick={() => setLocation('/pro?tab=therapists')}>\n                  View All Therapists\n                </Button>\n                <Button size=\"lg\" variant=\"outline\" onClick={() => setShowResults(false)}>\n                  Retake Quiz\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <nav className=\"border-b bg-card sticky top-0 z-50\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <img src={newLogo} alt=\"Kairo\" className=\"w-10 h-10\" />\n              <div>\n                <h1 className=\"text-xl font-bold\">Kairo</h1>\n                <p className=\"text-xs text-muted-foreground\">Find Your Perfect Therapist</p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation('/pro?tab=therapists')}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Therapists\n            </Button>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"container mx-auto px-6 py-12 flex-1 max-w-4xl\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center bg-primary/10 p-4 rounded-full mb-4\">\n            <Users className=\"w-8 h-8 text-primary\" />\n          </div>\n          <h1 className=\"text-4xl font-bold mb-3\">Find Your Perfect Match</h1>\n          <p className=\"text-xl text-muted-foreground\">\n            Answer a few questions to help us connect you with the right therapist\n          </p>\n        </div>\n\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center text-sm text-muted-foreground mb-3\">\n            <span>Step {currentStep + 1} of {steps.length}</span>\n            <span>{Math.round(progress)}% Complete</span>\n          </div>\n          <Progress value={progress} className=\"h-2\" />\n        </div>\n\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={currentStep}\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -20 }}\n            transition={{ duration: 0.3 }}\n          >\n            <Card className=\"border-2\">\n              <CardHeader>\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm font-medium text-primary\">\n                    {steps[currentStep].subtitle}\n                  </div>\n                  <CardTitle className=\"text-2xl\">{steps[currentStep].title}</CardTitle>\n                  <CardDescription className=\"text-base\">\n                    {steps[currentStep].description}\n                  </CardDescription>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-8\">\n                {/* Step 1: The Basics */}\n                {currentStep === 0 && (\n                  <>\n                    <div className=\"space-y-4\">\n                      <Label className=\"text-lg font-semibold\">\n                        How would you like to attend sessions?\n                      </Label>\n                      <div className=\"space-y-3\">\n                        {['In-person (near me)', 'Virtual (video/phone)', \"I'm open to either\"].map((option) => (\n                          <div key={option} className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n                            <Checkbox\n                              id={`session-${option}`}\n                              checked={answers.sessionType.includes(option)}\n                              onCheckedChange={(checked) => handleCheckboxChange('sessionType', option, checked as boolean)}\n                            />\n                            <Label htmlFor={`session-${option}`} className=\"cursor-pointer flex-1 text-base\">\n                              {option}\n                            </Label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <Label className=\"text-lg font-semibold\">\n                        When are you available for sessions?\n                        <span className=\"text-sm font-normal text-muted-foreground ml-2\">(Select all that apply)</span>\n                      </Label>\n                      <div className=\"space-y-3\">\n                        {['Mornings', 'Afternoons', 'Evenings', 'Flexible'].map((option) => (\n                          <div key={option} className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n                            <Checkbox\n                              id={`availability-${option}`}\n                              checked={answers.availability.includes(option)}\n                              onCheckedChange={(checked) => handleCheckboxChange('availability', option, checked as boolean)}\n                            />\n                            <Label htmlFor={`availability-${option}`} className=\"cursor-pointer flex-1 text-base\">\n                              {option}\n                            </Label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </>\n                )}\n\n                {/* Step 2: Areas of Focus */}\n                {currentStep === 1 && (\n                  <>\n                    <div className=\"space-y-4\">\n                      <Label className=\"text-lg font-semibold\">\n                        What brings you to therapy?\n                        <span className=\"text-sm font-normal text-muted-foreground ml-2\">(Select all that apply)</span>\n                      </Label>\n                      <div className=\"grid md:grid-cols-2 gap-3\">\n                        {[\n                          'Anxiety or panic attacks',\n                          'Depression or sadness',\n                          'Relationship issues',\n                          'Work / School stress',\n                          'Family conflicts',\n                          'Trauma or PTSD',\n                          'Grief or loss',\n                          'Addiction or substance use',\n                          'Identity (Gender, sexual, or cultural)',\n                          'Life transitions (e.g., new job, moving, baby)',\n                          \"I'm just not feeling like myself\",\n                          \"I'm not sure, I just need to talk\"\n                        ].map((option) => (\n                          <div key={option} className=\"flex items-start space-x-3 p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n                            <Checkbox\n                              id={`concern-${option}`}\n                              checked={answers.concernsAreas.includes(option)}\n                              onCheckedChange={(checked) => handleCheckboxChange('concernsAreas', option, checked as boolean)}\n                              className=\"mt-0.5\"\n                            />\n                            <Label htmlFor={`concern-${option}`} className=\"cursor-pointer flex-1 text-base leading-tight\">\n                              {option}\n                            </Label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <Label className=\"text-lg font-semibold\">\n                        Have you been in therapy before?\n                      </Label>\n                      <RadioGroup value={answers.priorTherapy} onValueChange={(value) => handleRadioChange('priorTherapy', value)}>\n                        {[\n                          'Yes, it was a helpful experience',\n                          'Yes, it was not a good experience',\n                          'No, this is my first time'\n                        ].map((option) => (\n                          <div key={option} className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n                            <RadioGroupItem value={option} id={`prior-${option}`} />\n                            <Label htmlFor={`prior-${option}`} className=\"cursor-pointer flex-1 text-base\">\n                              {option}\n                            </Label>\n                          </div>\n                        ))}\n                      </RadioGroup>\n                    </div>\n                  </>\n                )}\n\n                {/* Step 3: Therapy Style */}\n                {currentStep === 2 && (\n                  <>\n                    <div className=\"space-y-4\">\n                      <Label className=\"text-lg font-semibold\">\n                        I would prefer a therapist who...\n                      </Label>\n                      <RadioGroup value={answers.therapistApproach} onValueChange={(value) => handleRadioChange('therapistApproach', value)}>\n                        {[\n                          'Listens and guides me to explore my feelings and past.',\n                          'Teaches me concrete skills, strategies, and (sometimes) homework.',\n                          'A balance of both.'\n                        ].map((option) => (\n                          <div key={option} className=\"flex items-start space-x-3 p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n                            <RadioGroupItem value={option} id={`approach-${option}`} className=\"mt-0.5\" />\n                            <Label htmlFor={`approach-${option}`} className=\"cursor-pointer flex-1 text-base leading-tight\">\n                              {option}\n                            </Label>\n                          </div>\n                        ))}\n                      </RadioGroup>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <Label className=\"text-lg font-semibold\">\n                        I want to focus on...\n                      </Label>\n                      <RadioGroup value={answers.focusArea} onValueChange={(value) => handleRadioChange('focusArea', value)}>\n                        {[\n                          'Solving my current problems and learning new coping skills.',\n                          'Understanding my past to see how it affects my present.',\n                          \"I'm not sure, I'd like my therapist to help me decide.\"\n                        ].map((option) => (\n                          <div key={option} className=\"flex items-start space-x-3 p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n                            <RadioGroupItem value={option} id={`focus-${option}`} className=\"mt-0.5\" />\n                            <Label htmlFor={`focus-${option}`} className=\"cursor-pointer flex-1 text-base leading-tight\">\n                              {option}\n                            </Label>\n                          </div>\n                        ))}\n                      </RadioGroup>\n                    </div>\n                  </>\n                )}\n\n                {/* Step 4: Therapist Preferences */}\n                {currentStep === 3 && (\n                  <div className=\"space-y-4\">\n                    <Label className=\"text-lg font-semibold\">\n                      Do you have a preference for your therapist's gender?\n                      <span className=\"text-sm font-normal text-muted-foreground ml-2\">(100% optional)</span>\n                    </Label>\n                    <RadioGroup value={answers.genderPreference} onValueChange={(value) => handleRadioChange('genderPreference', value)}>\n                      {[\n                        'I prefer a male therapist',\n                        'I prefer a female therapist',\n                        'No preference'\n                      ].map((option) => (\n                        <div key={option} className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n                          <RadioGroupItem value={option} id={`gender-${option}`} />\n                          <Label htmlFor={`gender-${option}`} className=\"cursor-pointer flex-1 text-base\">\n                            {option}\n                          </Label>\n                        </div>\n                      ))}\n                    </RadioGroup>\n                  </div>\n                )}\n\n                <div className=\"flex gap-3 pt-4\">\n                  {currentStep > 0 && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleBack}\n                      className=\"flex-1\"\n                    >\n                      <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                      Back\n                    </Button>\n                  )}\n                  {currentStep < steps.length - 1 ? (\n                    <Button\n                      onClick={handleNext}\n                      disabled={!canProceed()}\n                      className=\"flex-1\"\n                    >\n                      Next Step\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  ) : (\n                    <Button\n                      onClick={handleSubmit}\n                      disabled={!canProceed()}\n                      className=\"flex-1\"\n                      size=\"lg\"\n                    >\n                      <Sparkles className=\"w-5 h-5 mr-2\" />\n                      Show My Matches\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </AnimatePresence>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":23358},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ContactSupport.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { useLocation } from 'wouter';\nimport { ArrowLeft, Mail, Clock, MessageSquare } from 'lucide-react';\nimport Footer from '@/components/Footer';\n\nexport default function ContactSupport() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"bg-gradient-to-br from-[#1a3a52] to-[#2d5a8f] py-16\">\n        <div className=\"container mx-auto px-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation('/')}\n            className=\"text-white hover:bg-white/10 mb-8\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-white\">Contact Support</h1>\n          <p className=\"text-white/80 mt-4\">We'd love to hear from you.</p>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-6 py-12 max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <div className=\"grid md:grid-cols-2 gap-8 mb-12\">\n            <div className=\"bg-card rounded-lg p-8 shadow-sm border\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <Mail className=\"w-6 h-6 text-primary\" />\n                <h3 className=\"font-bold text-xl\">General Queries</h3>\n              </div>\n              <p className=\"text-muted-foreground mb-4\">\n                For general questions and information\n              </p>\n              <a \n                href=\"mailto:hello@kairo.app\"\n                className=\"text-primary hover:underline font-medium\"\n              >\n                hello@kairo.app\n              </a>\n            </div>\n\n            <div className=\"bg-card rounded-lg p-8 shadow-sm border\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <MessageSquare className=\"w-6 h-6 text-primary\" />\n                <h3 className=\"font-bold text-xl\">Technical Help</h3>\n              </div>\n              <p className=\"text-muted-foreground mb-4\">\n                For technical issues and account assistance\n              </p>\n              <a \n                href=\"mailto:support@kairo.app\"\n                className=\"text-primary hover:underline font-medium\"\n              >\n                support@kairo.app\n              </a>\n            </div>\n          </div>\n\n          <div className=\"bg-muted/50 rounded-lg p-8 mb-12\">\n            <div className=\"flex items-center gap-3 mb-4\">\n              <Clock className=\"w-6 h-6 text-primary\" />\n              <h3 className=\"font-bold text-xl\">Response Time</h3>\n            </div>\n            <p className=\"text-muted-foreground\">\n              Within 24–48 hours, Monday to Saturday\n            </p>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              You can also reach us through the in-app \"Contact Support\" option for faster help.\n            </p>\n          </div>\n\n          <div className=\"bg-primary/5 rounded-lg p-8 text-center\">\n            <h3 className=\"text-2xl font-bold mb-4\">Need Immediate Crisis Support?</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              If you're experiencing a mental health emergency, please contact our crisis helpline immediately.\n            </p>\n            <a href=\"tel:1800-599-0019\" className=\"text-2xl font-bold text-primary\">\n              1800-599-0019\n            </a>\n            <p className=\"text-sm text-muted-foreground mt-4\">Available 24/7</p>\n          </div>\n        </motion.div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3746},"client/src/components/Assessments.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { usePlan } from '@/contexts/PlanContext';\nimport { useLocation } from 'wouter';\nimport { Brain, Heart, Lock, Sparkles, TrendingUp, ArrowLeft, ChevronRight } from 'lucide-react';\nimport { Radar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer, Cell, PieChart, Pie } from 'recharts';\nimport Footer from './Footer';\nimport newLogo from '@assets/Screenshot_2025-10-28_at_12.16.32_PM-removebg-preview_1761714308881.png';\n\nconst panasItems = [\n  { id: 1, text: 'Interested', type: 'positive' },\n  { id: 2, text: 'Distressed', type: 'negative' },\n  { id: 3, text: 'Excited', type: 'positive' },\n  { id: 4, text: 'Upset', type: 'negative' },\n  { id: 5, text: 'Strong', type: 'positive' },\n  { id: 6, text: 'Guilty', type: 'negative' },\n  { id: 7, text: 'Scared', type: 'negative' },\n  { id: 8, text: 'Hostile', type: 'negative' },\n  { id: 9, text: 'Enthusiastic', type: 'positive' },\n  { id: 10, text: 'Proud', type: 'positive' },\n  { id: 11, text: 'Irritable', type: 'negative' },\n  { id: 12, text: 'Alert', type: 'positive' },\n  { id: 13, text: 'Ashamed', type: 'negative' },\n  { id: 14, text: 'Inspired', type: 'positive' },\n  { id: 15, text: 'Nervous', type: 'negative' },\n  { id: 16, text: 'Determined', type: 'positive' },\n  { id: 17, text: 'Attentive', type: 'positive' },\n  { id: 18, text: 'Jittery', type: 'negative' },\n  { id: 19, text: 'Active', type: 'positive' },\n  { id: 20, text: 'Afraid', type: 'negative' },\n];\n\nconst eisItems = [\n  { id: 1, text: 'I can encourage others', factor: 'E' },\n  { id: 2, text: 'I can carry out my plans', factor: 'C' },\n  { id: 3, text: 'I care for others and feel concern for them', factor: 'J' },\n  { id: 4, text: 'I can set examples for others by my behavior', factor: 'C' },\n  { id: 5, text: 'I can keep patience when required', factor: 'E' },\n  { id: 6, text: 'I am aware of my own feelings', factor: 'A' },\n  { id: 7, text: 'People tell me I am an inspiration', factor: 'C' },\n  { id: 8, text: 'I usually remain cool and calm under pressure', factor: 'C' },\n  { id: 9, text: 'I can understand others feelings very well', factor: 'B' },\n  { id: 10, text: \"I can easily make out my friend's state of mind\", factor: 'B' },\n  { id: 11, text: 'I have good relationships with people', factor: 'E' },\n  { id: 12, text: 'I can handle most of my feelings very well', factor: 'A' },\n  { id: 13, text: 'I help others even after my work is over', factor: 'J' },\n  { id: 14, text: 'I express my emotions to others easily', factor: 'D' },\n  { id: 15, text: 'I think from others point of view', factor: 'B' },\n  { id: 16, text: \"I don't take advantage of others\", factor: 'F' },\n  { id: 17, text: 'I usually console people in difficulty', factor: 'E' },\n  { id: 18, text: 'I understand my strength and weaknesses', factor: 'A' },\n  { id: 19, text: 'I perform most of my tasks enthusiastically', factor: 'D' },\n  { id: 20, text: 'I can understand feelings of others', factor: 'B' },\n  { id: 21, text: 'I take care of people', factor: 'H' },\n  { id: 22, text: 'I like to help others', factor: 'H' },\n  { id: 23, text: 'I work hard for my organization', factor: 'I' },\n  { id: 24, text: 'I am a hard worker', factor: 'I' },\n  { id: 25, text: 'I can judge good and bad intentions of others', factor: 'B' },\n  { id: 26, text: 'I am emotionally stable', factor: 'D' },\n  { id: 27, text: 'I am trustworthy', factor: 'F' },\n  { id: 28, text: 'I show very less emotional reaction', factor: 'D' },\n  { id: 29, text: 'I am aware of my emotions', factor: 'A' },\n  { id: 30, text: 'I try to know myself', factor: 'G' },\n  { id: 31, text: 'I can do and complete most of my tasks', factor: 'C' },\n  { id: 32, text: 'I remain honest in my dealings with others', factor: 'F' },\n  { id: 33, text: 'I search for opportunities for my growth', factor: 'G' },\n  { id: 34, text: 'I work hard to achieve my goals', factor: 'C' },\n];\n\nconst factorNames = {\n  A: 'Self-awareness',\n  B: 'Empathy',\n  C: 'Self-motivation',\n  D: 'Emotional stability',\n  E: 'Managing relations',\n  F: 'Integrity',\n  G: 'Self-development',\n  H: 'Value orientation',\n  I: 'Commitment',\n  J: 'Altruistic behaviour',\n};\n\nconst factorNorms = {\n  A: { high: 16, normal: [10, 15], low: 9 },\n  B: { high: 20, normal: [12, 19], low: 11 },\n  C: { high: 24, normal: [15, 23], low: 14 },\n  D: { high: 16, normal: [10, 15], low: 9 },\n  E: { high: 16, normal: [10, 15], low: 9 },\n  F: { high: 12, normal: [8, 11], low: 7 },\n  G: { high: 8, normal: [5, 7], low: 4 },\n  H: { high: 8, normal: [5, 7], low: 4 },\n  I: { high: 8, normal: [5, 7], low: 4 },\n  J: { high: 8, normal: [5, 7], low: 4 },\n};\n\nexport default function Assessments() {\n  const { plan } = usePlan();\n  const [, setLocation] = useLocation();\n  const [selectedTest, setSelectedTest] = useState<'panas' | 'eis' | null>(null);\n  const [panasAnswers, setPanasAnswers] = useState<Record<number, number>>({});\n  const [eisAnswers, setEisAnswers] = useState<Record<number, number>>({});\n  const [showPanasResults, setShowPanasResults] = useState(false);\n  const [showEisResults, setShowEisResults] = useState(false);\n\n  const isPro = plan === 'pro';\n\n  const handlePanasChange = (itemId: number, value: number) => {\n    setPanasAnswers({ ...panasAnswers, [itemId]: value });\n  };\n\n  const handleEisChange = (itemId: number, value: number) => {\n    setEisAnswers({ ...eisAnswers, [itemId]: value });\n  };\n\n  const calculatePanasScores = () => {\n    const positiveItems = [1, 3, 5, 9, 10, 12, 14, 16, 17, 19];\n    const negativeItems = [2, 4, 6, 7, 8, 11, 13, 15, 18, 20];\n\n    const paScore = positiveItems.reduce((sum, id) => sum + (panasAnswers[id] || 0), 0);\n    const naScore = negativeItems.reduce((sum, id) => sum + (panasAnswers[id] || 0), 0);\n\n    return { paScore, naScore };\n  };\n\n  const calculateEisScores = () => {\n    const totalScore = Object.values(eisAnswers).reduce((sum, val) => sum + val, 0);\n    \n    const factorScores: Record<string, number> = {};\n    eisItems.forEach(item => {\n      const factor = item.factor;\n      factorScores[factor] = (factorScores[factor] || 0) + (eisAnswers[item.id] || 0);\n    });\n\n    return { totalScore, factorScores };\n  };\n\n  const getEisInterpretation = (score: number) => {\n    if (score >= 85) return 'High';\n    if (score >= 52) return 'Normal';\n    return 'Low';\n  };\n\n  const getFactorInterpretation = (factor: keyof typeof factorNorms, score: number) => {\n    const norms = factorNorms[factor];\n    if (score >= norms.high) return 'High';\n    if (score >= norms.normal[0] && score <= norms.normal[1]) return 'Normal';\n    return 'Low';\n  };\n\n  const handlePanasSubmit = () => {\n    const panasComplete = Object.keys(panasAnswers).length === 20;\n\n    if (!panasComplete) {\n      alert('Please complete all 20 PANAS questions before submitting.');\n      return;\n    }\n\n    setShowPanasResults(true);\n    setTimeout(() => {\n      document.getElementById('panas-results')?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }, 100);\n  };\n\n  const handleEisSubmit = () => {\n    const eisComplete = Object.keys(eisAnswers).length === 34;\n\n    if (!eisComplete) {\n      alert('Please complete all 34 EIS questions before submitting.');\n      return;\n    }\n\n    setShowEisResults(true);\n    setTimeout(() => {\n      document.getElementById('eis-results')?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }, 100);\n  };\n\n  const handleBackToTests = () => {\n    setSelectedTest(null);\n    setShowPanasResults(false);\n    setShowEisResults(false);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const { paScore, naScore } = showPanasResults ? calculatePanasScores() : { paScore: 0, naScore: 0 };\n  const { totalScore, factorScores } = showEisResults && isPro ? calculateEisScores() : { totalScore: 0, factorScores: {} };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <nav className=\"border-b bg-card sticky top-0 z-50\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <img src={newLogo} alt=\"Kairo\" className=\"w-10 h-10\" />\n              <div>\n                <h1 className=\"text-xl font-bold\">Kairo</h1>\n                <p className=\"text-xs text-muted-foreground\">Psychological Assessments</p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation(isPro ? '/pro' : '/free')}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"container mx-auto px-6 py-12 flex-1\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          {!selectedTest ? (\n            // Test Selection View\n            <>\n              <div className=\"text-center mb-12\">\n                <h1 className=\"text-4xl font-bold mb-4\">Psychological Assessments</h1>\n                <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                  Choose an assessment to understand your emotional state and intelligence through scientifically validated tests.\n                </p>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-8 max-w-5xl mx-auto\">\n                {/* PANAS Test Block */}\n                <motion.div\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <Card \n                    className=\"cursor-pointer border-2 hover:border-primary transition-all h-full\"\n                    onClick={() => setSelectedTest('panas')}\n                  >\n                    <CardHeader>\n                      <div className=\"bg-primary/10 p-4 rounded-lg w-fit mx-auto mb-4\">\n                        <Heart className=\"w-12 h-12 text-primary\" />\n                      </div>\n                      <CardTitle className=\"text-2xl text-center\">PANAS Scale</CardTitle>\n                      <CardDescription className=\"text-center text-base\">\n                        Check Your Current Mood\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        A quick 20-item questionnaire that measures your current emotional state, providing scores for Positive and Negative Affect.\n                      </p>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Badge variant=\"outline\">20 Questions</Badge>\n                          <Badge variant=\"outline\">5-10 mins</Badge>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Badge variant=\"secondary\">✓ Free for All</Badge>\n                        </div>\n                      </div>\n                      <Button className=\"w-full\" size=\"lg\">\n                        Take PANAS Test\n                        <ChevronRight className=\"w-4 h-4 ml-2\" />\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n\n                {/* EIS Test Block */}\n                <motion.div\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <Card \n                    className=\"cursor-pointer border-2 hover:border-purple-500 transition-all h-full\"\n                    onClick={() => setSelectedTest('eis')}\n                  >\n                    <CardHeader>\n                      <div className=\"bg-purple-500/10 p-4 rounded-lg w-fit mx-auto mb-4\">\n                        <Brain className=\"w-12 h-12 text-purple-500\" />\n                      </div>\n                      <CardTitle className=\"text-2xl text-center\">EIS-HPD Scale</CardTitle>\n                      <CardDescription className=\"text-center text-base\">\n                        Discover Your Emotional Intelligence\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        A comprehensive 34-item assessment measuring your emotional intelligence across 10 key factors including empathy, self-awareness, and motivation.\n                      </p>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Badge variant=\"outline\">34 Questions</Badge>\n                          <Badge variant=\"outline\">10-15 mins</Badge>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          {!isPro && <Badge variant=\"secondary\"><Lock className=\"w-3 h-3 mr-1\" />Pro Results</Badge>}\n                          {isPro && <Badge variant=\"default\">✓ Pro Access</Badge>}\n                        </div>\n                      </div>\n                      <Button className=\"w-full\" size=\"lg\" variant={isPro ? \"default\" : \"secondary\"}>\n                        Take EIS Test\n                        <ChevronRight className=\"w-4 h-4 ml-2\" />\n                      </Button>\n                      {!isPro && (\n                        <p className=\"text-xs text-muted-foreground text-center\">\n                          Detailed results require Pro plan\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              </div>\n            </>\n          ) : selectedTest === 'panas' ? (\n            // PANAS Test View\n            <div className=\"space-y-8\">\n              <div className=\"flex items-center gap-4\">\n                <Button variant=\"outline\" onClick={handleBackToTests}>\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Tests\n                </Button>\n              </div>\n\n              <Card className=\"border-2\">\n                <CardHeader>\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"bg-primary/10 p-3 rounded-lg\">\n                      <Heart className=\"w-8 h-8 text-primary\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-2xl mb-2\">PANAS Scale</CardTitle>\n                      <CardDescription className=\"text-base\">\n                        Indicate to what extent you feel this way right now (at the present moment).\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    {panasItems.map((item) => (\n                      <div key={item.id} className=\"border rounded-lg p-4 bg-card\">\n                        <Label className=\"text-base font-medium mb-3 block\">{item.id}. {item.text}</Label>\n                        <RadioGroup\n                          value={panasAnswers[item.id]?.toString()}\n                          onValueChange={(value) => handlePanasChange(item.id, parseInt(value))}\n                          className=\"flex flex-wrap gap-3\"\n                        >\n                          {[\n                            { value: 1, label: 'Very Slightly or Not at All' },\n                            { value: 2, label: 'A Little' },\n                            { value: 3, label: 'Moderately' },\n                            { value: 4, label: 'Quite a Bit' },\n                            { value: 5, label: 'Extremely' },\n                          ].map((option) => (\n                            <div key={option.value} className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value={option.value.toString()} id={`panas-${item.id}-${option.value}`} />\n                              <Label htmlFor={`panas-${item.id}-${option.value}`} className=\"cursor-pointer text-sm\">\n                                {option.value} - {option.label}\n                              </Label>\n                            </div>\n                          ))}\n                        </RadioGroup>\n                      </div>\n                    ))}\n                  </div>\n\n                  <div className=\"flex justify-center pt-4\">\n                    <Button\n                      size=\"lg\"\n                      onClick={handlePanasSubmit}\n                      className=\"px-12 py-4 text-lg\"\n                      disabled={Object.keys(panasAnswers).length < 20}\n                    >\n                      <Heart className=\"w-5 h-5 mr-2\" />\n                      Submit PANAS Assessment\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {showPanasResults && (\n                <motion.div\n                  id=\"panas-results\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.5 }}\n                >\n                  <Card className=\"border-2 border-primary\">\n                    <CardHeader>\n                      <CardTitle className=\"text-2xl flex items-center gap-2\">\n                        <Heart className=\"w-6 h-6 text-primary\" />\n                        Your PANAS Results\n                      </CardTitle>\n                      <CardDescription>Your current emotional state snapshot</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"grid md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <h3 className=\"font-semibold text-lg\">Positive Affect</h3>\n                            <Badge variant=\"default\" className=\"text-lg px-3 py-1\">{paScore}/50</Badge>\n                          </div>\n                          <Progress value={(paScore / 50) * 100} className=\"h-4\" />\n                          <p className=\"text-sm text-muted-foreground mt-4\">\n                            Your Positive Affect score ({paScore}) measures the extent to which you feel enthusiastic, active, and alert. \n                            The average 'momentary' score is 29.7. {paScore >= 29.7 ? 'Your score is above average!' : 'Consider activities that boost positive emotions.'}\n                          </p>\n                        </div>\n\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <h3 className=\"font-semibold text-lg\">Negative Affect</h3>\n                            <Badge variant=\"secondary\" className=\"text-lg px-3 py-1\">{naScore}/50</Badge>\n                          </div>\n                          <Progress value={(naScore / 50) * 100} className=\"h-4\" />\n                          <p className=\"text-sm text-muted-foreground mt-4\">\n                            Your Negative Affect score ({naScore}) measures the extent to which you feel distressed, angry, or fearful. \n                            The average 'momentary' score is 14.8. {naScore <= 14.8 ? 'Your score is at or below average.' : 'Consider stress-reduction techniques.'}\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"mt-6\">\n                        <ResponsiveContainer width=\"100%\" height={200}>\n                          <PieChart>\n                            <Pie\n                              data={[\n                                { name: 'PA Score', value: paScore, color: '#10b981' },\n                                { name: 'PA Remaining', value: 50 - paScore, color: '#e5e7eb' },\n                              ]}\n                              cx=\"25%\"\n                              cy=\"50%\"\n                              innerRadius={60}\n                              outerRadius={80}\n                              dataKey=\"value\"\n                            >\n                              {[\n                                { name: 'PA Score', value: paScore, color: '#10b981' },\n                                { name: 'PA Remaining', value: 50 - paScore, color: '#e5e7eb' },\n                              ].map((entry, index) => (\n                                <Cell key={`cell-${index}`} fill={entry.color} />\n                              ))}\n                            </Pie>\n                            <Pie\n                              data={[\n                                { name: 'NA Score', value: naScore, color: '#f59e0b' },\n                                { name: 'NA Remaining', value: 50 - naScore, color: '#e5e7eb' },\n                              ]}\n                              cx=\"75%\"\n                              cy=\"50%\"\n                              innerRadius={60}\n                              outerRadius={80}\n                              dataKey=\"value\"\n                            >\n                              {[\n                                { name: 'NA Score', value: naScore, color: '#f59e0b' },\n                                { name: 'NA Remaining', value: 50 - naScore, color: '#e5e7eb' },\n                              ].map((entry, index) => (\n                                <Cell key={`cell-${index}`} fill={entry.color} />\n                              ))}\n                            </Pie>\n                          </PieChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              )}\n            </div>\n          ) : (\n            // EIS Test View\n            <div className=\"space-y-8\">\n              <div className=\"flex items-center gap-4\">\n                <Button variant=\"outline\" onClick={handleBackToTests}>\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Tests\n                </Button>\n              </div>\n\n              <Card className=\"border-2\">\n                <CardHeader>\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"bg-purple-500/10 p-3 rounded-lg\">\n                      <Brain className=\"w-8 h-8 text-purple-500\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <CardTitle className=\"text-2xl\">EIS-HPD Scale</CardTitle>\n                        {!isPro && <Badge variant=\"secondary\"><Lock className=\"w-3 h-3 mr-1\" />Pro Feature</Badge>}\n                      </div>\n                      <CardDescription className=\"text-base\">\n                        Express your views by selecting one option for each statement.\n                        {!isPro && <span className=\"block mt-2 text-amber-600 font-medium\">Note: Detailed results require a Pro plan.</span>}\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    {eisItems.map((item) => (\n                      <div key={item.id} className=\"border rounded-lg p-4 bg-card\">\n                        <Label className=\"text-base font-medium mb-3 block\">{item.id}. {item.text}</Label>\n                        <RadioGroup\n                          value={eisAnswers[item.id]?.toString()}\n                          onValueChange={(value) => handleEisChange(item.id, parseInt(value))}\n                          className=\"flex flex-wrap gap-3\"\n                        >\n                          {[\n                            { value: 5, label: 'Strongly Agree' },\n                            { value: 4, label: 'Agree' },\n                            { value: 3, label: 'Uncertain' },\n                            { value: 2, label: 'Disagree' },\n                            { value: 1, label: 'Strongly Disagree' },\n                          ].map((option) => (\n                            <div key={option.value} className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value={option.value.toString()} id={`eis-${item.id}-${option.value}`} />\n                              <Label htmlFor={`eis-${item.id}-${option.value}`} className=\"cursor-pointer text-sm\">\n                                {option.label}\n                              </Label>\n                            </div>\n                          ))}\n                        </RadioGroup>\n                      </div>\n                    ))}\n                  </div>\n\n                  <div className=\"flex justify-center pt-4\">\n                    <Button\n                      size=\"lg\"\n                      onClick={handleEisSubmit}\n                      className=\"px-12 py-4 text-lg\"\n                      disabled={Object.keys(eisAnswers).length < 34}\n                    >\n                      <Brain className=\"w-5 h-5 mr-2\" />\n                      Submit EIS Assessment\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {showEisResults && (\n                <motion.div\n                  id=\"eis-results\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.5 }}\n                >\n                  {isPro ? (\n                    <Card className=\"border-2 border-purple-500\">\n                      <CardHeader>\n                        <CardTitle className=\"text-2xl flex items-center gap-2\">\n                          <Brain className=\"w-6 h-6 text-purple-500\" />\n                          Your Emotional Intelligence Results\n                        </CardTitle>\n                        <CardDescription>Complete breakdown of your EQ assessment</CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"space-y-8\">\n                        {/* Overall Score */}\n                        <div className=\"text-center space-y-4\">\n                          <h3 className=\"text-xl font-semibold\">Overall Emotional Intelligence</h3>\n                          <div className=\"flex items-center justify-center gap-4\">\n                            <Badge \n                              variant={totalScore >= 85 ? 'default' : totalScore >= 52 ? 'secondary' : 'destructive'} \n                              className=\"text-2xl px-6 py-3\"\n                            >\n                              {totalScore}/170\n                            </Badge>\n                            <Badge \n                              variant=\"outline\" \n                              className=\"text-xl px-4 py-2\"\n                            >\n                              {getEisInterpretation(totalScore)}\n                            </Badge>\n                          </div>\n                          <Progress value={(totalScore / 170) * 100} className=\"h-4 max-w-md mx-auto\" />\n                          <div className=\"flex justify-between max-w-md mx-auto text-xs text-muted-foreground\">\n                            <span>Low (0-51)</span>\n                            <span>Normal (52-84)</span>\n                            <span>High (85+)</span>\n                          </div>\n                        </div>\n\n                        {/* Radar Chart */}\n                        <div className=\"mt-8\">\n                          <h3 className=\"text-lg font-semibold text-center mb-6\">10-Factor Breakdown</h3>\n                          <ResponsiveContainer width=\"100%\" height={400}>\n                            <RadarChart data={Object.entries(factorScores).map(([factor, score]) => ({\n                              factor: factorNames[factor as keyof typeof factorNames],\n                              score,\n                              benchmark: factorNorms[factor as keyof typeof factorNorms].high,\n                            }))}>\n                              <PolarGrid />\n                              <PolarAngleAxis dataKey=\"factor\" tick={{ fontSize: 12 }} />\n                              <PolarRadiusAxis angle={90} domain={[0, 'auto']} />\n                              <Radar\n                                name=\"Your Score\"\n                                dataKey=\"score\"\n                                stroke=\"#8b5cf6\"\n                                fill=\"#8b5cf6\"\n                                fillOpacity={0.6}\n                              />\n                              <Radar\n                                name=\"High Benchmark\"\n                                dataKey=\"benchmark\"\n                                stroke=\"#10b981\"\n                                fill=\"#10b981\"\n                                fillOpacity={0.2}\n                              />\n                            </RadarChart>\n                          </ResponsiveContainer>\n                        </div>\n\n                        {/* Factor Table */}\n                        <div className=\"mt-8\">\n                          <h3 className=\"text-lg font-semibold mb-4\">Detailed Factor Analysis</h3>\n                          <div className=\"border rounded-lg overflow-hidden\">\n                            <table className=\"w-full\">\n                              <thead className=\"bg-muted\">\n                                <tr>\n                                  <th className=\"px-4 py-3 text-left\">Factor</th>\n                                  <th className=\"px-4 py-3 text-center\">Your Score</th>\n                                  <th className=\"px-4 py-3 text-center\">Interpretation</th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                {Object.entries(factorScores).map(([factor, score]) => (\n                                  <tr key={factor} className=\"border-t\">\n                                    <td className=\"px-4 py-3 font-medium\">\n                                      {factorNames[factor as keyof typeof factorNames]}\n                                    </td>\n                                    <td className=\"px-4 py-3 text-center\">{score}</td>\n                                    <td className=\"px-4 py-3 text-center\">\n                                      <Badge\n                                        variant={\n                                          getFactorInterpretation(factor as keyof typeof factorNorms, score) === 'High'\n                                            ? 'default'\n                                            : getFactorInterpretation(factor as keyof typeof factorNorms, score) === 'Normal'\n                                            ? 'secondary'\n                                            : 'destructive'\n                                        }\n                                      >\n                                        {getFactorInterpretation(factor as keyof typeof factorNorms, score)}\n                                      </Badge>\n                                    </td>\n                                  </tr>\n                                ))}\n                              </tbody>\n                            </table>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    <Card className=\"border-2 border-amber-500 bg-gradient-to-br from-amber-50 to-orange-50 dark:from-amber-950 dark:to-orange-950\">\n                      <CardHeader>\n                        <CardTitle className=\"text-2xl flex items-center gap-2\">\n                          <Lock className=\"w-6 h-6 text-amber-600\" />\n                          You've Completed the Emotional Intelligence Test!\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-6\">\n                        <p className=\"text-lg\">\n                          To unlock your detailed results, including your overall EQ score, a 10-factor breakdown, and a personalized radar chart, \n                          please upgrade to our Pro plan.\n                        </p>\n                        <div className=\"bg-white dark:bg-gray-900 rounded-lg p-6 space-y-3\">\n                          <h4 className=\"font-semibold flex items-center gap-2\">\n                            <TrendingUp className=\"w-5 h-5 text-primary\" />\n                            What you'll unlock with Pro:\n                          </h4>\n                          <ul className=\"space-y-2 ml-7\">\n                            <li className=\"flex items-start gap-2\">\n                              <span className=\"text-primary mt-1\">•</span>\n                              <span>Overall Emotional Intelligence score and interpretation</span>\n                            </li>\n                            <li className=\"flex items-start gap-2\">\n                              <span className=\"text-primary mt-1\">•</span>\n                              <span>Detailed breakdown of all 10 EQ factors</span>\n                            </li>\n                            <li className=\"flex items-start gap-2\">\n                              <span className=\"text-primary mt-1\">•</span>\n                              <span>Interactive radar chart visualization</span>\n                            </li>\n                            <li className=\"flex items-start gap-2\">\n                              <span className=\"text-primary mt-1\">•</span>\n                              <span>Personalized insights and recommendations</span>\n                            </li>\n                          </ul>\n                        </div>\n                        <Button\n                          size=\"lg\"\n                          className=\"w-full text-lg py-6\"\n                          onClick={() => setLocation('/select-plan')}\n                        >\n                          <Sparkles className=\"w-5 h-5 mr-2\" />\n                          Upgrade to Pro Now\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  )}\n                </motion.div>\n              )}\n            </div>\n          )}\n        </motion.div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":35232},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"vite.config.ts":{"content":"// vite.config.js\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nconst __dirname = fileURLToPath(new URL(\".\", import.meta.url));\n\n// (Optional) load Replit helper plugins only in non-prod repls\nconst replitPlugins =\n  process.env.NODE_ENV !== \"production\" && process.env.REPL_ID !== undefined\n    ? [\n        await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n          m.cartographer(),\n        ),\n        await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n          m.devBanner(),\n        ),\n      ]\n    : [];\n\nexport default defineConfig({\n  plugins: [react(), runtimeErrorOverlay(), ...replitPlugins],\n\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n\n  root: path.resolve(__dirname, \"client\"),\n\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n    hmr: {\n      clientPort: 443,\n    },\n    // 👇 allow Replit’s dynamic *.pike.replit.dev host\n    // You can replace `true` with an explicit array of hosts if you prefer strictness.\n    allowedHosts: true,\n  },\n\n  preview: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n    // Mirror the dev-server setting for preview mode too\n    allowedHosts: true,\n  },\n});\n","size_bytes":1589},"client/src/components/examples/CrisisSupport.tsx":{"content":"import CrisisSupport from '../CrisisSupport';\n\nexport default function CrisisSupportExample() {\n  return (\n    <div className=\"p-6 max-w-2xl\">\n      <CrisisSupport />\n    </div>\n  );\n}\n","size_bytes":185},"client/src/components/PrivacyPolicy.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { useLocation } from 'wouter';\nimport { ArrowLeft } from 'lucide-react';\nimport Footer from '@/components/Footer';\n\nexport default function PrivacyPolicy() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"bg-gradient-to-br from-[#1a3a52] to-[#2d5a8f] py-16\">\n        <div className=\"container mx-auto px-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation('/')}\n            className=\"text-white hover:bg-white/10 mb-8\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-white\">Privacy Policy</h1>\n          <p className=\"text-white/80 mt-4\">Last updated: {new Date().toLocaleDateString()}</p>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-6 py-12 max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          className=\"prose prose-lg max-w-none\"\n        >\n          <p className=\"text-lg text-muted-foreground leading-relaxed mb-8\">\n            At Kairo, we respect your privacy and are committed to protecting your personal and emotional well-being data. This Privacy Policy explains how we collect, use, and safeguard your information when you use our app, website, or services.\n          </p>\n\n          <h2 className=\"text-2xl font-bold mt-8 mb-4\">1. Information We Collect</h2>\n          <p className=\"text-muted-foreground mb-4\">We collect the following:</p>\n          <ul className=\"list-disc pl-6 space-y-2 text-muted-foreground mb-6\">\n            <li>Personal details (name, email, phone number) for account creation.</li>\n            <li>Emotional insights from your journal entries, AI interactions, or EQ assessments — always anonymized and encrypted.</li>\n            <li>Device and app usage data (e.g., session duration, feature usage) to improve user experience.</li>\n          </ul>\n\n          <h2 className=\"text-2xl font-bold mt-8 mb-4\">2. How We Use Your Data</h2>\n          <ul className=\"list-disc pl-6 space-y-2 text-muted-foreground mb-6\">\n            <li>To personalize your emotional growth journey and provide tailored recommendations.</li>\n            <li>To improve app performance and features.</li>\n            <li>To send updates, insights, or reminders related to your emotional progress.</li>\n          </ul>\n\n          <h2 className=\"text-2xl font-bold mt-8 mb-4\">3. Data Protection</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            We use industry-standard encryption, secure servers, and regular audits to ensure your information remains safe and private.\n          </p>\n\n          <h2 className=\"text-2xl font-bold mt-8 mb-4\">4. Your Rights</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            You can request to access, update, or delete your data anytime by contacting{' '}\n            <a href=\"mailto:privacy@kairo.app\" className=\"text-primary hover:underline\">\n              privacy@kairo.app\n            </a>\n          </p>\n\n          <h2 className=\"text-2xl font-bold mt-8 mb-4\">5. Changes to Policy</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            We may update this policy periodically. Updates will always be posted here with a revised \"Last Updated\" date.\n          </p>\n\n          <div className=\"mt-12 p-6 bg-muted rounded-lg\">\n            <p className=\"text-sm text-muted-foreground\">\n              If you have any questions about our Privacy Policy, please contact us at{' '}\n              <a href=\"mailto:privacy@kairo.app\" className=\"text-primary hover:underline\">\n                privacy@kairo.app\n              </a>\n            </p>\n          </div>\n        </motion.div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3989},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ServicesComparison.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { useLocation } from 'wouter';\nimport { Check, X, ArrowLeft } from 'lucide-react';\nimport Footer from '@/components/Footer';\n\nexport default function ServicesComparison() {\n  const [, setLocation] = useLocation();\n\n  const freeFeatures = [\n    'AI Consoling Agent (Vent Room)',\n    'Daily Mood Tracking',\n    'Journal Entries',\n    'PANAS Assessment (Free)',\n    'Join One Healing Circle',\n    'Access to Crisis Support Resources',\n    'One Free Consultation Session',\n    'Basic Emotional Wellness Tips'\n  ];\n\n  const proFeatures = [\n    'Everything in Free Plan',\n    'One Healing Circle per Month',\n    'Professional Therapist Matching',\n    'Unlimited Therapy Sessions',\n    'Full EQ Assessment with Detailed Results',\n    'Advanced Mood Analytics & Graphs',\n    'Writing Prompts for Journaling',\n    'Priority Crisis Support',\n    'Personal Dashboard with Insights',\n    'Session Reminders & Notifications'\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"relative overflow-hidden bg-gradient-to-br from-[#1a3a52] via-[#2d5a8f] to-[#3d6a9f] py-20\">\n        <div className=\"absolute top-8 left-8 z-20\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation('/')}\n            className=\"text-white hover:bg-white/10\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n        </div>\n\n        <div className=\"container mx-auto px-6 text-center relative z-10\">\n          <motion.h1\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"text-4xl md:text-6xl font-bold text-white mb-6\"\n          >\n            Choose Your Emotional Growth Path\n          </motion.h1>\n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"text-xl text-white/90 max-w-3xl mx-auto mb-12\"\n          >\n            Whether you're starting your journey or ready to dive deep, Kairo has a plan that fits your needs.\n          </motion.p>\n        </div>\n      </div>\n\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"grid md:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n            {/* Free Plan */}\n            <motion.div\n              initial={{ opacity: 0, x: -30 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-card rounded-2xl p-8 shadow-lg border-2 border-muted\"\n            >\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-bold mb-2\">Free Plan</h2>\n                <p className=\"text-muted-foreground\">Start your journey with essential tools</p>\n                <div className=\"mt-6\">\n                  <span className=\"text-5xl font-bold\">₹0</span>\n                  <span className=\"text-muted-foreground\">/month</span>\n                </div>\n              </div>\n\n              <ul className=\"space-y-4 mb-8\">\n                {freeFeatures.map((feature, index) => (\n                  <li key={index} className=\"flex items-start gap-3\">\n                    <Check className=\"w-5 h-5 text-green-500 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-muted-foreground\">{feature}</span>\n                  </li>\n                ))}\n              </ul>\n\n              <Button\n                onClick={() => setLocation('/select-plan')}\n                className=\"w-full\"\n                size=\"lg\"\n                variant=\"outline\"\n              >\n                Start with Free\n              </Button>\n            </motion.div>\n\n            {/* Pro Plan */}\n            <motion.div\n              initial={{ opacity: 0, x: 30 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gradient-to-br from-primary/10 to-primary/5 rounded-2xl p-8 shadow-xl border-2 border-primary relative overflow-hidden\"\n            >\n              <div className=\"absolute top-4 right-4 bg-primary text-primary-foreground px-4 py-1 rounded-full text-sm font-semibold\">\n                RECOMMENDED\n              </div>\n\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-3xl font-bold mb-2\">Pro Plan</h2>\n                <p className=\"text-muted-foreground\">Unlock your full emotional potential</p>\n                <div className=\"mt-6\">\n                  <span className=\"text-5xl font-bold\">₹499</span>\n                  <span className=\"text-muted-foreground\">/month</span>\n                </div>\n              </div>\n\n              <ul className=\"space-y-4 mb-8\">\n                {proFeatures.map((feature, index) => (\n                  <li key={index} className=\"flex items-start gap-3\">\n                    <Check className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                    <span className={index === 0 ? 'font-semibold' : 'text-muted-foreground'}>{feature}</span>\n                  </li>\n                ))}\n              </ul>\n\n              <Button\n                onClick={() => setLocation('/select-plan')}\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                Start with Pro\n              </Button>\n            </motion.div>\n          </div>\n\n          <div className=\"text-center mt-16\">\n            <p className=\"text-muted-foreground mb-6\">\n              Not sure which plan is right for you? Both plans give you access to our supportive community.\n            </p>\n            <Button\n              onClick={() => setLocation('/select-plan')}\n              size=\"lg\"\n              variant=\"outline\"\n            >\n              Continue to Plan Selection\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6029},"client/src/components/Settings.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Separator } from '@/components/ui/separator';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { motion } from 'framer-motion';\nimport { Settings as SettingsIcon, User, Bell, Lock, Moon, Globe, Shield } from 'lucide-react';\n\ninterface SettingsProps {\n  userName?: string;\n  userEmail?: string;\n}\n\nexport default function Settings({ userName = \"Guest User\", userEmail = \"user@example.com\" }: SettingsProps) {\n  const [notifications, setNotifications] = useState({\n    sessions: true,\n    circles: true,\n    reminders: true,\n    newsletter: false,\n  });\n\n  const [privacy, setPrivacy] = useState({\n    profileVisible: true,\n    activityVisible: false,\n  });\n\n  const [darkMode, setDarkMode] = useState(false);\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"p-6\" data-testid=\"card-settings\">\n        <div className=\"flex items-center gap-3 mb-6\">\n          <div className=\"bg-primary/10 p-3 rounded-lg\">\n            <SettingsIcon className=\"w-6 h-6 text-primary\" />\n          </div>\n          <div>\n            <h2 className=\"text-2xl font-bold\">Settings</h2>\n            <p className=\"text-sm text-muted-foreground\">Manage your account and preferences</p>\n          </div>\n        </div>\n\n        <ScrollArea className=\"h-[500px] pr-4\">\n          <div className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <User className=\"w-5 h-5 text-primary\" />\n                Profile Information\n              </h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\">Full Name</Label>\n                  <Input id=\"name\" defaultValue={userName} data-testid=\"input-name\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input id=\"email\" type=\"email\" defaultValue={userEmail} data-testid=\"input-email\" />\n                </div>\n                <Button variant=\"outline\" data-testid=\"button-save-profile\">\n                  Save Changes\n                </Button>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <Lock className=\"w-5 h-5 text-primary\" />\n                Change Password\n              </h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"current-password\">Current Password</Label>\n                  <Input id=\"current-password\" type=\"password\" data-testid=\"input-current-password\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"new-password\">New Password</Label>\n                  <Input id=\"new-password\" type=\"password\" data-testid=\"input-new-password\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n                  <Input id=\"confirm-password\" type=\"password\" data-testid=\"input-confirm-password\" />\n                </div>\n                <Button variant=\"outline\" data-testid=\"button-change-password\">\n                  Update Password\n                </Button>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <Bell className=\"w-5 h-5 text-primary\" />\n                Notification Preferences\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"sessions-notif\">Session Reminders</Label>\n                    <p className=\"text-sm text-muted-foreground\">Get notified about upcoming therapy sessions</p>\n                  </div>\n                  <Switch \n                    id=\"sessions-notif\" \n                    checked={notifications.sessions}\n                    onCheckedChange={(checked) => setNotifications({ ...notifications, sessions: checked })}\n                    data-testid=\"switch-sessions\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"circles-notif\">Circle Notifications</Label>\n                    <p className=\"text-sm text-muted-foreground\">Stay updated on healing circle activities</p>\n                  </div>\n                  <Switch \n                    id=\"circles-notif\" \n                    checked={notifications.circles}\n                    onCheckedChange={(checked) => setNotifications({ ...notifications, circles: checked })}\n                    data-testid=\"switch-circles\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"reminders-notif\">Daily Reminders</Label>\n                    <p className=\"text-sm text-muted-foreground\">Mood check-ins and journal prompts</p>\n                  </div>\n                  <Switch \n                    id=\"reminders-notif\" \n                    checked={notifications.reminders}\n                    onCheckedChange={(checked) => setNotifications({ ...notifications, reminders: checked })}\n                    data-testid=\"switch-reminders\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"newsletter-notif\">Newsletter</Label>\n                    <p className=\"text-sm text-muted-foreground\">Wellness tips and platform updates</p>\n                  </div>\n                  <Switch \n                    id=\"newsletter-notif\" \n                    checked={notifications.newsletter}\n                    onCheckedChange={(checked) => setNotifications({ ...notifications, newsletter: checked })}\n                    data-testid=\"switch-newsletter\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <Shield className=\"w-5 h-5 text-primary\" />\n                Privacy Settings\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"profile-visible\">Profile Visibility</Label>\n                    <p className=\"text-sm text-muted-foreground\">Allow others to see your profile</p>\n                  </div>\n                  <Switch \n                    id=\"profile-visible\" \n                    checked={privacy.profileVisible}\n                    onCheckedChange={(checked) => setPrivacy({ ...privacy, profileVisible: checked })}\n                    data-testid=\"switch-profile-visible\"\n                  />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"activity-visible\">Activity Status</Label>\n                    <p className=\"text-sm text-muted-foreground\">Show when you're active</p>\n                  </div>\n                  <Switch \n                    id=\"activity-visible\" \n                    checked={privacy.activityVisible}\n                    onCheckedChange={(checked) => setPrivacy({ ...privacy, activityVisible: checked })}\n                    data-testid=\"switch-activity-visible\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                <Globe className=\"w-5 h-5 text-primary\" />\n                Appearance\n              </h3>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label htmlFor=\"dark-mode\">Dark Mode</Label>\n                  <p className=\"text-sm text-muted-foreground\">Toggle dark theme</p>\n                </div>\n                <Switch \n                  id=\"dark-mode\" \n                  checked={darkMode}\n                  onCheckedChange={setDarkMode}\n                  data-testid=\"switch-dark-mode\"\n                />\n              </div>\n            </div>\n\n            <Separator />\n\n            <div className=\"pt-4\">\n              <Button variant=\"destructive\" className=\"w-full\" data-testid=\"button-delete-account\">\n                Delete Account\n              </Button>\n              <p className=\"text-sm text-muted-foreground text-center mt-2\">\n                This action cannot be undone\n              </p>\n            </div>\n          </div>\n        </ScrollArea>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9145},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/Footer.tsx":{"content":"import { Mail, Phone, MapPin, Facebook, Twitter, Instagram, Linkedin } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport kairoLogo from '@assets/Logo_Kairo_Final-removebg-preview_1761680007331.png';\n\nexport default function Footer() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <footer className=\"bg-gradient-to-br from-[#1a3a52] to-[#2d5a8f] text-white mt-auto\" data-testid=\"footer\">\n      <div className=\"container mx-auto px-6 py-12\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div>\n            <div className=\"flex items-center gap-2 mb-4\">\n              <img src={kairoLogo} alt=\"Kairo\" className=\"w-10 h-10\" />\n              <span className=\"font-bold text-xl\">Kairo</span>\n            </div>\n            <p className=\"text-sm text-white/80 mb-4\">\n              Your emotional growth companion. Combining AI, emotional intelligence, and human connection.\n            </p>\n            <div className=\"flex gap-3\">\n              <a href=\"#\" className=\"hover:scale-110 transition p-2 rounded-full bg-white/10\" data-testid=\"link-facebook\">\n                <Facebook className=\"w-4 h-4\" />\n              </a>\n              <a href=\"#\" className=\"hover:scale-110 transition p-2 rounded-full bg-white/10\" data-testid=\"link-twitter\">\n                <Twitter className=\"w-4 h-4\" />\n              </a>\n              <a href=\"#\" className=\"hover:scale-110 transition p-2 rounded-full bg-white/10\" data-testid=\"link-instagram\">\n                <Instagram className=\"w-4 h-4\" />\n              </a>\n              <a href=\"#\" className=\"hover:scale-110 transition p-2 rounded-full bg-white/10\" data-testid=\"link-linkedin\">\n                <Linkedin className=\"w-4 h-4\" />\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Quick Links</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <button onClick={() => setLocation('/')} className=\"text-white/80 hover:text-white transition\" data-testid=\"link-about\">\n                  About Us\n                </button>\n              </li>\n              <li>\n                <button onClick={() => setLocation('/services')} className=\"text-white/80 hover:text-white transition\" data-testid=\"link-get-started\">\n                  Get Started\n                </button>\n              </li>\n              <li>\n                <button onClick={() => setLocation('/assessments')} className=\"text-white/80 hover:text-white transition\">\n                  Assessments\n                </button>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Support</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <button onClick={() => setLocation('/help-center')} className=\"text-white/80 hover:text-white transition\" data-testid=\"link-help-center\">\n                  Help Center\n                </button>\n              </li>\n              <li>\n                <button onClick={() => setLocation('/contact-support')} className=\"text-white/80 hover:text-white transition\" data-testid=\"link-contact\">\n                  Contact Support\n                </button>\n              </li>\n              <li>\n                <button onClick={() => setLocation('/privacy-policy')} className=\"text-white/80 hover:text-white transition\" data-testid=\"link-privacy\">\n                  Privacy Policy\n                </button>\n              </li>\n              <li>\n                <button onClick={() => setLocation('/terms-of-service')} className=\"text-white/80 hover:text-white transition\" data-testid=\"link-terms\">\n                  Terms of Service\n                </button>\n              </li>\n              <li>\n                <button onClick={() => setLocation('/feedback')} className=\"text-white/80 hover:text-white transition\" data-testid=\"link-feedback\">\n                  Feedback\n                </button>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Contact Us</h3>\n            <ul className=\"space-y-3 text-sm\">\n              <li className=\"flex items-start gap-2\">\n                <Mail className=\"w-4 h-4 mt-0.5\" />\n                <div>\n                  <div className=\"text-white/70 text-xs\">General Inquiries</div>\n                  <a href=\"mailto:hello@kairo.app\" className=\"text-white/90 hover:text-white transition\" data-testid=\"link-email\">\n                    hello@kairo.app\n                  </a>\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <Mail className=\"w-4 h-4 mt-0.5\" />\n                <div>\n                  <div className=\"text-white/70 text-xs\">Technical Support</div>\n                  <a href=\"mailto:support@kairo.app\" className=\"text-white/90 hover:text-white transition\">\n                    support@kairo.app\n                  </a>\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <Phone className=\"w-4 h-4 mt-0.5\" />\n                <div>\n                  <div className=\"text-white/70 text-xs\">Crisis Helpline</div>\n                  <a href=\"tel:1800-599-0019\" className=\"text-white/90 hover:text-white transition\" data-testid=\"link-phone\">\n                    1800-599-0019\n                  </a>\n                </div>\n              </li>\n            </ul>\n            <p className=\"text-xs text-white/70 mt-4\">\n              Response time: 24-48 hours, Monday to Saturday\n            </p>\n          </div>\n        </div>\n\n        <div className=\"border-t border-white/20 mt-8 pt-8 text-center text-sm text-white/80\">\n          <p data-testid=\"text-copyright\">&copy; {new Date().getFullYear()} Kairo. All rights reserved. Your emotional well-being matters.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5925},"replit.md":{"content":"# Mental Health & Wellness Platform\n\n## Overview\nA personal companion application for emotional wellness and mental health support. Built as a frontend-only Single Page Application (SPA) with React and TypeScript.\n\n**Current State**: Fully configured and running in Replit environment\n**Last Updated**: October 29, 2025\n\n## Project Architecture\n\n### Tech Stack\n- **Frontend**: React 18 + TypeScript + Vite\n- **UI Components**: Radix UI + Tailwind CSS\n- **State Management**: TanStack Query + React Context\n- **Routing**: Wouter (client-side routing)\n- **Build Tool**: Vite 5\n\n### Project Structure\n```\n.\n├── client/               # React frontend (SPA)\n│   ├── src/\n│   │   ├── components/  # UI components\n│   │   ├── contexts/    # React contexts (PlanContext)\n│   │   ├── hooks/       # Custom hooks\n│   │   ├── lib/         # Utilities\n│   │   └── pages/       # Route pages (not-found)\n│   └── index.html       # Entry HTML\n├── shared/              # Shared types (legacy, not used)\n│   └── schema.ts        # Database schema definitions\n└── attached_assets/     # Static assets and images\n```\n\n**Note**: This is a frontend-only application. There is no backend server or database integration. All data is managed client-side using React state and context.\n\n## Configuration\n\n### Development\n- **Dev Server Port**: 5000\n- **Host**: 0.0.0.0 (configured for Replit proxy)\n- **HMR Port**: 443 (for Replit's HTTPS proxy)\n- **Build Output**: dist/public/\n\n### Key Files\n- `vite.config.ts`: Vite configuration with Replit-specific plugins\n- `package.json`: Dependencies and scripts\n- `tsconfig.json`: TypeScript configuration\n- `tailwind.config.ts`: Tailwind CSS configuration\n\n## Setup and Running\n\n### Initial Setup\n1. Dependencies installed via `npm install` (478 packages)\n2. Workflow \"Dev Server\" configured to run `npm run dev` on port 5000\n3. Deployment configured for Replit Autoscale with build and preview commands\n4. Assets organized in `attached_assets/` directory for proper Vite import resolution\n\n### Available Scripts\n- `npm run dev`: Start Vite development server\n- `npm run build`: Build for production\n- `npm start`: Preview production build\n- `npm run check`: Type check with TypeScript\n\n### Data Management\nThis is a frontend-only SPA with no backend. All application state is managed client-side using:\n- React Context (PlanContext for plan selection)\n- Local component state\n- TanStack Query for data fetching patterns\n\n## Deployment\nConfigured for Replit Autoscale deployment:\n- **Build**: `npm run build` (outputs to dist/public/)\n- **Run**: `npm start` (Vite preview server)\n- **Target**: Autoscale (frontend-only SPA)\n\n## Features\nBased on the components structure, the app includes:\n- Landing page with journey start\n- Authentication system\n- Dual plan options (Free/Pro)\n- **Psychological Assessments** - Scientifically validated tests\n  - PANAS Scale (20 items) - Positive and Negative Affect measurement (free for all)\n  - EIS-HPD (34 items) - Emotional Intelligence Scale with 10-factor breakdown (Pro only)\n  - Interactive results with gauges, charts, and radar visualizations\n  - Freemium gating: EIS-HPD results require Pro upgrade\n- Mood tracking\n- Journal entries\n- Calendar view\n- Crisis support\n- AI-powered vent room\n- Healing circles\n- Therapist matching and booking\n- Daily tips\n- Profile dashboard\n\n## Recent Changes\n**October 29, 2025**\n\n### Fresh GitHub Clone Import - Replit Setup (Latest)\n- Imported project as fresh clone from GitHub to Replit environment\n- Installed all npm dependencies (478 packages via npm install)\n- Created `.gitignore` file with Node.js best practices (node_modules, dist, env files, IDE files, etc.)\n- Fixed asset organization issues:\n  - Moved `Logo_Kairo_Final-removebg-preview_1761680007331.png` from root to `attached_assets/`\n  - Moved `Friendly_counselor_on_laptop_c61e16f3.png` from root to `attached_assets/`\n  - Renamed `Screenshot_2025-10-28_at_12.16.32_PM-removebg-preview_1761714308881.jpeg` to `.png` extension to match imports\n  - All image assets now properly organized in `attached_assets/` directory\n- Configured \"Dev Server\" workflow to run `npm run dev` on port 5000 with webview output\n- Configured deployment for Replit Autoscale:\n  - Build: `npm run build`\n  - Run: `npm start`\n  - Target: autoscale (stateless frontend SPA)\n- Verified dev server starts successfully on port 5000 with proper Replit proxy configuration\n- Verified application loads correctly with landing page displaying Kairo branding\n- Application fully functional and running in Replit environment\n- Import completed successfully\n\n### UI/UX Enhancements\n- **Landing Page - About Kairo Section:**\n  - Redesigned About Kairo section to match \"What Makes Kairo Different\" styling for uniform UI\n  - Centered layout with Heart icon badge and gradient background (from-primary/5 to-primary/10)\n  - Consistent visual design language across all information sections\n  - Improved visual hierarchy and readability while maintaining content structure\n- **Notifications Card:**\n  - Removed Calendar button from Reminders & Notifications section\n  - Streamlined interface for cleaner user experience\n- **Mood Tracker Complete Redesign:**\n  - Implemented dynamic background gradients that change based on selected mood (green for great, yellow for okay, red for awful, etc.)\n  - Enhanced mood selection interface with gradient buttons and smooth animations\n  - Added mood analytics section with two interactive visualizations:\n    * Area chart showing mood trends over time using Recharts\n    * Pie chart displaying mood distribution across different emotional states\n  - Redesigned mood history from simple list to colorful gradient cards\n  - Mood-responsive UI colors throughout the component for better emotional feedback\n  - Maintained three-step mood logging flow (mood → context → location) with improved visuals\n\n### Fresh GitHub Import Setup\n- Imported project from GitHub as fresh clone to Replit environment\n- Installed all npm dependencies (478 packages)\n- Created `.gitignore` with Node.js best practices (node_modules, dist, env files, etc.)\n- Organized project assets by creating `attached_assets/` directory and moving all images and generated_images\n- Configured \"Dev Server\" workflow to run `npm run dev` on port 5000 with webview output\n- Configured deployment for Replit Autoscale (build: npm run build, run: npm start)\n- Verified dev server starts successfully on port 5000\n- Verified frontend is fully accessible and functional\n- Application running successfully in Replit environment\n\n**October 28, 2025**\n\n### Therapist Matching Questionnaire (Latest)\n- Created comprehensive multi-step therapist matching questionnaire (`/therapist-matching`)\n  - **Step 1: The Basics** - Session type and availability preferences\n  - **Step 2: What's on your mind?** - Therapy concerns and prior experience (12 concern areas)\n  - **Step 3: Your Therapy Style** - Therapist approach and focus preferences\n  - **Step 4: Therapist Preferences** - Gender preference (100% optional)\n- Features:\n  - Beautiful animated multi-step form with progress tracking\n  - Validation requiring completion of each step before proceeding\n  - Back/Next navigation with smooth scrolling\n  - Mobile-responsive design matching existing branding\n  - \"Show My Matches\" submission redirects to therapist directory\n  - Seamless integration with existing header/footer\n- Updated Pro Plan Dashboard:\n  - \"Start Matching Process\" button now navigates to dedicated questionnaire page\n  - Removed inline matching component for cleaner UX\n  - Therapists tab properly handles URL parameters\n\n### Assessment System Improvements\n- **Modified Free & Pro Dashboards:**\n  - Removed embedded EQ assessment from home pages\n  - Added prominent assessment cards encouraging users to take tests\n  - Cards feature gradient backgrounds, brain icons, and clear CTAs\n  - Clicking cards navigates to dedicated `/assessments` page\n- **Assessments Page Redesign:**\n  - Users can now take PANAS and EIS tests independently\n  - Each test has its own submit button\n  - Results display immediately below the respective test\n  - Smooth scroll to results after submission\n  - No longer requires completing both tests simultaneously\n\n### Psychological Assessments Feature\n- Implemented comprehensive Psychological Assessments feature\n  - Created Assessments.tsx component with PANAS and EIS-HPD questionnaires\n  - Implemented scoring algorithms for both tests with proper normative data\n  - Built interactive results visualizations (gauges, progress bars, radar charts, factor tables)\n  - Enforced freemium boundary: PANAS results free, EIS-HPD results Pro-only with upgrade CTA\n  - Added Assessments navigation link to both Free and Pro dashboards\n  - Configured /assessments route in App.tsx\n\n### Initial Setup\n- Updated branding with transparent Kairo logo across landing and auth pages\n- Fixed login page back button positioning for professional appearance\n- GitHub import completed and configured for Replit\n- Created missing `shared/schema.ts` for database types\n- Configured Vite to allow all hosts (required for Replit proxy)\n- Set up PostgreSQL database and pushed schema\n- Configured workflow to run development server on port 5000\n- Set up deployment configuration for production\n","size_bytes":9387},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"src/index.ts":{"content":"\r\nimport express, { Express } from 'express';\r\nimport dotenv from 'dotenv';\r\nimport mongoose from 'mongoose';\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\nimport morgan from 'morgan';\r\n\r\n// --- Import the route files ---\r\nimport authRoutes from './routes/auth';\r\nimport chatRoutes from './routes/chat';\r\n// ---------------------------------------------\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\nconst app: Express = express();\r\nconst port = process.env.PORT || 3001;\r\n\r\n// --- Middleware Setup ---\r\napp.use(cors()); // Enables Cross-Origin Resource Sharing\r\napp.use(helmet()); // Sets various security-related HTTP headers\r\napp.use(morgan('dev')); // Logs HTTP requests to the console for debugging\r\napp.use(express.json()); // Parses incoming JSON requests and puts the parsed data in req.body\r\n\r\n// --- Root route ---\r\napp.get('/', (req, res) => {\r\n    res.json({\r\n        message: 'AI Therapist Backend Server is running!',\r\n        status: 'success',\r\n        timestamp: new Date().toISOString(),\r\n        availableRoutes: [\r\n            '/api/auth - Authentication endpoints',\r\n            '/api/chat - Chat endpoints'\r\n        ]\r\n    });\r\n});\r\n\r\n// --- Health check route ---\r\napp.get('/health', (req, res) => {\r\n    res.json({\r\n        status: 'healthy',\r\n        uptime: process.uptime(),\r\n        timestamp: new Date().toISOString()\r\n    });\r\n});\r\n\r\n// --- NEW: Connect the routes to the application ---\r\n// Any request starting with '/api/auth' will be handled by our authRoutes.\r\napp.use('/api/auth', authRoutes);\r\n// Any request starting with '/api/chat' will be handled by our chatRoutes.\r\napp.use('/api/chat', chatRoutes);\r\n// --------------------------------------------------\r\n\r\n// --- Database Connection ---\r\nconst mongoUri = process.env.MONGO_URI;\r\n\r\nif (!mongoUri) {\r\n    console.error('FATAL ERROR: MONGO_URI is not defined.');\r\n    process.exit(1);\r\n}\r\n\r\nmongoose.connect(mongoUri)\r\n    .then(() => {\r\n        console.log('MongoDB connected successfully.');\r\n        // --- Start the Server ---\r\n        // We only start the server after a successful database connection.\r\n        app.listen(port, () => {\r\n            console.log(`Server is running on port ${port}`);\r\n        });\r\n    })\r\n    .catch((err) => {\r\n        console.error('MongoDB connection error:', err);\r\n        process.exit(1);\r\n    });\r\n","size_bytes":2368},"client/src/components/examples/EQAssessment.tsx":{"content":"import EQAssessment from '../EQAssessment';\n\nexport default function EQAssessmentExample() {\n  return (\n    <div className=\"p-6 max-w-2xl\">\n      <EQAssessment canRetake={true} onComplete={(score) => console.log('EQ Score:', score)} />\n    </div>\n  );\n}\n","size_bytes":254},"client/src/components/examples/AIVentRoom.tsx":{"content":"import AIVentRoom from '../AIVentRoom';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\nexport default function AIVentRoomExample() {\n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <Tabs defaultValue=\"free\">\n        <TabsList className=\"mb-4\">\n          <TabsTrigger value=\"free\">Free Plan</TabsTrigger>\n          <TabsTrigger value=\"pro\">Pro Plan</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"free\">\n          <AIVentRoom isPro={false} messageLimit={5} />\n        </TabsContent>\n        <TabsContent value=\"pro\">\n          <AIVentRoom isPro={true} />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":663},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/SessionConfirmation.tsx":{"content":"import { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle2, Calendar as CalendarIcon, Clock, User, FileText } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface SessionConfirmationProps {\n  therapistName: string;\n  date: string;\n  time: string;\n  notes?: string;\n  onClose: () => void;\n}\n\nexport default function SessionConfirmation({ \n  therapistName, \n  date, \n  time, \n  notes, \n  onClose \n}: SessionConfirmationProps) {\n  const formattedDate = new Date(date).toLocaleDateString('en-US', { \n    weekday: 'long', \n    year: 'numeric', \n    month: 'long', \n    day: 'numeric' \n  });\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.3 }}\n      className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-6 z-50\"\n    >\n      <Card className=\"max-w-lg w-full p-6\">\n        <div className=\"text-center mb-6\">\n          <div className=\"mx-auto w-16 h-16 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center mb-4\">\n            <CheckCircle2 className=\"w-10 h-10 text-green-600 dark:text-green-400\" />\n          </div>\n          <h2 className=\"text-2xl font-bold mb-2\">Session Confirmed!</h2>\n          <p className=\"text-muted-foreground\">\n            Your therapy session has been successfully scheduled\n          </p>\n        </div>\n\n        <div className=\"space-y-4 mb-6\">\n          <div className=\"flex items-start gap-3 p-4 bg-muted rounded-lg\">\n            <User className=\"w-5 h-5 text-primary mt-0.5\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Therapist</p>\n              <p className=\"font-semibold\">{therapistName}</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-start gap-3 p-4 bg-muted rounded-lg\">\n            <CalendarIcon className=\"w-5 h-5 text-primary mt-0.5\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Date</p>\n              <p className=\"font-semibold\">{formattedDate}</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-start gap-3 p-4 bg-muted rounded-lg\">\n            <Clock className=\"w-5 h-5 text-primary mt-0.5\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Time</p>\n              <p className=\"font-semibold\">{time}</p>\n            </div>\n          </div>\n\n          {notes && (\n            <div className=\"flex items-start gap-3 p-4 bg-muted rounded-lg\">\n              <FileText className=\"w-5 h-5 text-primary mt-0.5\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Session Notes</p>\n                <p className=\"text-sm\">{notes}</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6\">\n          <p className=\"text-sm text-blue-900 dark:text-blue-100\">\n            <strong>Note:</strong> A confirmation email has been sent to your registered email address. \n            Please check your calendar for the session details.\n          </p>\n        </div>\n\n        <Button onClick={onClose} className=\"w-full\" size=\"lg\">\n          Close\n        </Button>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":3437},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { PlanProvider } from \"@/contexts/PlanContext\";\nimport LandingPage from \"@/components/LandingPage\";\nimport ServicesComparison from \"@/components/ServicesComparison\";\nimport AuthPage from \"@/components/AuthPage\";\nimport DualOptionPage from \"@/components/DualOptionPage\";\nimport FreePlanDashboard from \"@/components/FreePlanDashboard\";\nimport ProPlanDashboard from \"@/components/ProPlanDashboard\";\nimport Assessments from \"@/components/Assessments\";\nimport TherapistMatchingQuestionnaire from \"@/components/TherapistMatchingQuestionnaire\";\nimport PrivacyPolicy from \"@/components/PrivacyPolicy\";\nimport TermsOfService from \"@/components/TermsOfService\";\nimport HelpCenter from \"@/components/HelpCenter\";\nimport ContactSupport from \"@/components/ContactSupport\";\nimport Feedback from \"@/components/Feedback\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={LandingPage} />\n      <Route path=\"/services\" component={ServicesComparison} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/select-plan\" component={DualOptionPage} />\n      <Route path=\"/free\" component={FreePlanDashboard} />\n      <Route path=\"/pro\" component={ProPlanDashboard} />\n      <Route path=\"/assessments\" component={Assessments} />\n      <Route path=\"/therapist-matching\" component={TherapistMatchingQuestionnaire} />\n      <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n      <Route path=\"/terms-of-service\" component={TermsOfService} />\n      <Route path=\"/help-center\" component={HelpCenter} />\n      <Route path=\"/contact-support\" component={ContactSupport} />\n      <Route path=\"/feedback\" component={Feedback} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <PlanProvider>\n          <Toaster />\n          <Router />\n        </PlanProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2289},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ProPlanDashboard.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { useLocation } from 'wouter';\nimport { usePlan } from '@/contexts/PlanContext';\nimport DailyTip from './DailyTip';\nimport EQAssessment from './EQAssessment';\nimport JournalEntry from './JournalEntry';\nimport MoodTracker from './MoodTracker';\nimport AIVentRoom from './AIVentRoom';\nimport HealingCircle from './HealingCircle';\nimport TherapistCard from './TherapistCard';\nimport SessionBooking from './SessionBooking';\nimport CrisisSupport from './CrisisSupport';\nimport NotificationsCard from './NotificationsCard';\nimport CalendarView from './CalendarView';\nimport ProfileDashboard from './ProfileDashboard';\nimport Settings from './Settings';\nimport SessionConfirmation from './SessionConfirmation';\nimport Footer from './Footer';\nimport { Home, BookOpen, MessageCircle, Users, AlertCircle, Stethoscope, Heart, User, Settings as SettingsIcon, LogOut, TrendingUp, Award, Target, Calendar, BookText, Brain } from 'lucide-react';\nimport newLogo from '@assets/Screenshot_2025-10-28_at_12.16.32_PM-removebg-preview_1761714308881.png';\n\nexport default function ProPlanDashboard() {\n  const [, setLocation] = useLocation();\n  const { setPlan } = usePlan();\n  \n  const urlParams = new URLSearchParams(window.location.search);\n  const initialTab = urlParams.get('tab') || 'home';\n  \n  const [activeTab, setActiveTab] = useState(initialTab);\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [showProfile, setShowProfile] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [bookingTherapist, setBookingTherapist] = useState<{ name: string; availability: string } | null>(null);\n  const [joinedCircles, setJoinedCircles] = useState<string[]>([]);\n  const [sessionConfirmation, setSessionConfirmation] = useState<{\n    therapistName: string;\n    date: string;\n    time: string;\n    notes?: string;\n  } | null>(null);\n\n  const handleLogout = () => {\n    setPlan(null);\n    setLocation('/');\n  };\n\n  const handleJoinCircle = (circleName: string) => {\n    if (joinedCircles.length < 1) {\n      setJoinedCircles([...joinedCircles, circleName]);\n      console.log('Joined circle:', circleName);\n    }\n  };\n\n  //todo: remove mock functionality\n  const therapists = [\n    {\n      name: \"Dr. Sarah Patel\",\n      specialization: \"CBT & Anxiety Specialist\",\n      bio: \"Specializing in cognitive behavioral therapy with over 10 years of experience helping clients manage anxiety and depression.\",\n      rating: 4.8,\n      reviews: 156,\n      yearsExperience: 12,\n      availability: \"Mon-Fri, 2-6 PM IST\",\n    },\n    {\n      name: \"Dr. Amit Kumar\",\n      specialization: \"Trauma & PTSD\",\n      bio: \"Expert in trauma-focused therapy and EMDR techniques for healing from traumatic experiences.\",\n      rating: 4.7,\n      reviews: 98,\n      yearsExperience: 8,\n      availability: \"Tue-Sat, 10 AM-4 PM IST\",\n    },\n    {\n      name: \"Dr. Priya Sharma\",\n      specialization: \"Relationship Counseling\",\n      bio: \"Helping couples and individuals navigate relationship challenges with evidence-based approaches.\",\n      rating: 4.9,\n      reviews: 203,\n      yearsExperience: 15,\n      availability: \"Wed-Sun, 3-8 PM IST\",\n    },\n    {\n      name: \"Dr. Rajesh Mehta\",\n      specialization: \"Stress & Burnout\",\n      bio: \"Specializing in stress management and preventing burnout in high-pressure environments.\",\n      rating: 4.6,\n      reviews: 87,\n      yearsExperience: 10,\n      availability: \"Mon-Wed, 5-9 PM IST\",\n    }\n  ];\n\n  const healingCircles = [\n    {\n      name: \"Anxiety Support Group\",\n      description: \"A supportive space to share experiences and coping strategies for managing anxiety.\",\n      schedule: \"Tuesdays, 7:00 PM IST\",\n      participants: 18,\n      maxParticipants: 25,\n    },\n    {\n      name: \"Depression Recovery Circle\",\n      description: \"Share experiences and support each other in the journey of recovery.\",\n      schedule: \"Thursdays, 8:00 PM IST\",\n      participants: 14,\n      maxParticipants: 20,\n    },\n    {\n      name: \"Mindfulness & Meditation\",\n      description: \"Learn and practice mindfulness techniques together in a peaceful group setting.\",\n      schedule: \"Fridays, 6:30 PM IST\",\n      participants: 22,\n      maxParticipants: 30,\n    },\n    {\n      name: \"Stress Management Workshop\",\n      description: \"Practical strategies for managing daily stress and building resilience.\",\n      schedule: \"Saturdays, 5:00 PM IST\",\n      participants: 16,\n      maxParticipants: 25,\n    },\n    {\n      name: \"Young Adults Support\",\n      description: \"A peer support group for young adults navigating life challenges.\",\n      schedule: \"Sundays, 4:00 PM IST\",\n      participants: 20,\n      maxParticipants: 25,\n    },\n    {\n      name: \"Career Transition Support\",\n      description: \"Support for professionals going through career changes and transitions.\",\n      schedule: \"Mondays, 6:00 PM IST\",\n      participants: 12,\n      maxParticipants: 20,\n    }\n  ];\n\n  const streak = 7;\n  const latestEQScore = 78;\n  const sessionsCompleted = 12;\n  const daysActive = 42;\n  const journalEntries = 45;\n\n  if (showSettings) {\n    return (\n      <div className=\"min-h-screen bg-background flex flex-col\">\n        <nav className=\"border-b bg-card sticky top-0 z-50\">\n          <div className=\"container mx-auto px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <img src={newLogo} alt=\"Kairo\" className=\"w-10 h-10\" />\n                <div>\n                  <h1 className=\"text-xl font-bold\">Kairo</h1>\n                  <Badge variant=\"default\">Pro Plan</Badge>\n                </div>\n              </div>\n              <Button variant=\"ghost\" onClick={() => setShowSettings(false)}>\n                Back to Dashboard\n              </Button>\n            </div>\n          </div>\n        </nav>\n        <div className=\"container mx-auto px-6 py-8 flex-1\">\n          <Settings userName=\"Guest User\" userEmail=\"user@example.com\" />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (showProfile) {\n    return (\n      <div className=\"min-h-screen bg-background flex flex-col\">\n        <nav className=\"border-b bg-card sticky top-0 z-50\">\n          <div className=\"container mx-auto px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <img src={newLogo} alt=\"Kairo\" className=\"w-10 h-10\" />\n                <div>\n                  <h1 className=\"text-xl font-bold\">Kairo</h1>\n                  <Badge variant=\"default\">Pro Plan</Badge>\n                </div>\n              </div>\n              <Button variant=\"ghost\" onClick={() => setShowProfile(false)}>\n                Back to Dashboard\n              </Button>\n            </div>\n          </div>\n        </nav>\n        <div className=\"container mx-auto px-6 py-8 flex-1\">\n          <ProfileDashboard userName=\"Guest User\" isPro={true} />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      {showCalendar && <CalendarView onClose={() => setShowCalendar(false)} />}\n\n      <nav className=\"border-b bg-card sticky top-0 z-50\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <img src={newLogo} alt=\"Kairo\" className=\"w-10 h-10\" data-testid=\"img-logo\" />\n              <div>\n                <h1 className=\"text-xl font-bold\" data-testid=\"text-app-title\">Kairo</h1>\n                <Badge variant=\"default\" data-testid=\"badge-plan\">Pro Plan</Badge>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-profile-menu\">\n                    <User className=\"w-5 h-5\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={() => setShowProfile(true)} data-testid=\"menu-profile\">\n                    <User className=\"w-4 h-4 mr-2\" />\n                    Profile\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setShowSettings(true)} data-testid=\"menu-settings\">\n                    <SettingsIcon className=\"w-4 h-4 mr-2\" />\n                    Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout} data-testid=\"menu-logout\">\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"container mx-auto px-6 py-8 flex-1\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid grid-cols-8 w-full max-w-6xl mx-auto\">\n            <TabsTrigger value=\"home\" data-testid=\"tab-home\">\n              <Home className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Home</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"journal\" data-testid=\"tab-journal\">\n              <BookOpen className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Journal</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"mood\" data-testid=\"tab-mood\">\n              <Heart className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Mood</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"ai\" data-testid=\"tab-ai\">\n              <MessageCircle className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">AI</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"circles\" data-testid=\"tab-circles\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Circles</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"therapists\" data-testid=\"tab-therapists\">\n              <Stethoscope className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Therapy</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"crisis\" data-testid=\"tab-crisis\">\n              <AlertCircle className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Crisis</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"assessments\" data-testid=\"tab-assessments\" onClick={() => setLocation('/assessments')}>\n              <Brain className=\"w-4 h-4 mr-2\" />\n              <span className=\"hidden sm:inline\">Assessments</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"home\" className=\"space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"space-y-6\"\n            >\n              <div>\n                <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"text-welcome\">Welcome to Kairo Pro</h2>\n                <p className=\"text-muted-foreground\" data-testid=\"text-welcome-subtitle\">Your personalized wellness companion</p>\n              </div>\n\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <Card className=\"p-6\" data-testid=\"card-eq\">\n                  <div className=\"flex items-center gap-3\">\n                    <TrendingUp className=\"w-8 h-8 text-primary\" />\n                    <div>\n                      <p className=\"text-2xl font-bold\" data-testid=\"text-eq-score\">{latestEQScore}</p>\n                      <p className=\"text-sm text-muted-foreground\">Latest EQ Score</p>\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-6\" data-testid=\"card-sessions\">\n                  <div className=\"flex items-center gap-3\">\n                    <Target className=\"w-8 h-8 text-primary\" />\n                    <div>\n                      <p className=\"text-2xl font-bold\" data-testid=\"text-session-count\">{sessionsCompleted}</p>\n                      <p className=\"text-sm text-muted-foreground\">Sessions</p>\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-6 cursor-pointer hover-elevate\" onClick={() => setActiveTab('journal')} data-testid=\"card-journal\">\n                  <div className=\"flex items-center gap-3\">\n                    <BookText className=\"w-8 h-8 text-primary\" />\n                    <div>\n                      <p className=\"text-2xl font-bold\" data-testid=\"text-journal-count\">{journalEntries}</p>\n                      <p className=\"text-sm text-muted-foreground\">Journals</p>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n\n              <NotificationsCard onViewCalendar={() => setShowCalendar(true)} />\n\n              <DailyTip tip=\"Remember to practice self-compassion today. Treat yourself with the same kindness you'd offer a good friend.\" />\n\n              <Card className=\"p-6 bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-950/20 dark:to-blue-950/20 border-2 border-primary/20 hover-elevate cursor-pointer\" onClick={() => setLocation('/assessments')} data-testid=\"card-assessments\">\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"bg-primary p-4 rounded-full\">\n                    <Brain className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-2xl font-bold mb-2\">Take Your Psychological Assessments</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Track your emotional wellness with scientifically validated assessments. \n                      Complete the PANAS Scale for mood tracking and the EIS-HPD test for comprehensive emotional intelligence analysis with detailed factor breakdowns.\n                    </p>\n                    <div className=\"flex items-center gap-2 text-primary font-semibold\">\n                      <span>Start Assessments</span>\n                      <span className=\"text-xl\">→</span>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            </motion.div>\n          </TabsContent>\n\n          <TabsContent value=\"journal\">\n            <JournalEntry\n              onSave={(entry) => console.log('Journal saved:', entry)}\n              showPrompts={true}\n              showPreviousEntries={true}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"mood\">\n            <MoodTracker />\n          </TabsContent>\n\n          <TabsContent value=\"ai\">\n            <AIVentRoom isPro={true} />\n          </TabsContent>\n\n          <TabsContent value=\"circles\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"text-circles-title\">Healing Circles</h2>\n              <p className=\"text-muted-foreground mb-4\" data-testid=\"text-circles-subtitle\">\n                Join unlimited healing circles and connect with supportive communities\n              </p>\n              <p className=\"text-sm text-muted-foreground leading-relaxed mb-4\">\n                Healing Circles are peer support groups where members share experiences, offer mutual support, and grow together. \n                These structured group sessions are facilitated by trained moderators and focus on specific topics like anxiety, \n                stress management, mindfulness, and more. Connect with others who understand your journey and find strength in community.\n              </p>\n              \n              <Card className=\"p-4 bg-muted/50\">\n                <h3 className=\"font-semibold text-lg mb-3 flex items-center gap-2\">\n                  <Users className=\"w-5 h-5 text-primary\" />\n                  Community Guidelines\n                </h3>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-primary mt-0.5\">•</span>\n                    <span><strong>Respect & Confidentiality:</strong> What's shared in the circle stays in the circle. Treat all members with respect and empathy.</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-primary mt-0.5\">•</span>\n                    <span><strong>Listen Actively:</strong> Give others your full attention. Everyone's experience is valid and deserves to be heard.</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-primary mt-0.5\">•</span>\n                    <span><strong>Share Thoughtfully:</strong> Share your experiences honestly, but avoid giving unsolicited advice. Use \"I\" statements.</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-primary mt-0.5\">•</span>\n                    <span><strong>No Judgment:</strong> Create a safe space free from criticism. Different perspectives and experiences are welcomed.</span>\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-primary mt-0.5\">•</span>\n                    <span><strong>Be Present:</strong> Participate actively and arrive on time. Your presence matters to the community.</span>\n                  </li>\n                </ul>\n              </Card>\n            </div>\n            <div className=\"space-y-4\">\n              {healingCircles.map((circle, index) => (\n                <HealingCircle\n                  key={index}\n                  {...circle}\n                  isPro={true}\n                  isJoined={joinedCircles.includes(circle.name)}\n                  canJoinMore={joinedCircles.length < 1}\n                  onJoin={() => handleJoinCircle(circle.name)}\n                />\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"therapists\" className=\"space-y-6\">\n            <div className=\"mb-4\">\n              <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"text-therapists-title\">Professional Therapists</h2>\n              <p className=\"text-muted-foreground\" data-testid=\"text-therapists-subtitle\">\n                Choose your therapist and schedule sessions at your convenience\n              </p>\n            </div>\n\n            {bookingTherapist ? (\n              <SessionBooking\n                therapistName={bookingTherapist.name}\n                availability={bookingTherapist.availability}\n                onBook={(booking) => {\n                  setSessionConfirmation({\n                    therapistName: booking.therapistName,\n                    date: booking.date,\n                    time: booking.time,\n                    notes: booking.notes\n                  });\n                  setBookingTherapist(null);\n                }}\n                onCancel={() => setBookingTherapist(null)}\n              />\n            ) : (\n              <>\n                <Card className=\"p-6 bg-gradient-to-br from-primary/10 to-primary/5\" data-testid=\"card-get-matched\">\n                  <h3 className=\"text-xl font-bold mb-2\">Get Matched with the Right Therapist</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Answer a few questions and we'll recommend therapists that match your needs and preferences.\n                  </p>\n                  <Button onClick={() => setLocation('/therapist-matching')} data-testid=\"button-start-matching\">\n                    Start Matching Process\n                  </Button>\n                </Card>\n\n                <div className=\"space-y-4\">\n                  {therapists.map((therapist, index) => (\n                    <TherapistCard\n                      key={index}\n                      {...therapist}\n                      canSchedule={true}\n                      onSchedule={() => setBookingTherapist({ name: therapist.name, availability: therapist.availability })}\n                    />\n                  ))}\n                </div>\n              </>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"crisis\">\n            <CrisisSupport isPro={true} />\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {sessionConfirmation && (\n        <SessionConfirmation\n          therapistName={sessionConfirmation.therapistName}\n          date={sessionConfirmation.date}\n          time={sessionConfirmation.time}\n          notes={sessionConfirmation.notes}\n          onClose={() => setSessionConfirmation(null)}\n        />\n      )}\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":21605},"client/src/components/EQAssessment.tsx":{"content":"import { useState } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Brain, CheckCircle } from 'lucide-react';\n\ninterface Question {\n  id: number;\n  question: string;\n  options: string[];\n}\n\nconst questions: Question[] = [\n  { id: 1, question: \"How well do you recognize your own emotions?\", options: [\"Very well\", \"Well\", \"Somewhat\", \"Not well\"] },\n  { id: 2, question: \"How easily can you manage stress in difficult situations?\", options: [\"Very easily\", \"Easily\", \"With difficulty\", \"Very difficult\"] },\n  { id: 3, question: \"How comfortable are you expressing your feelings to others?\", options: [\"Very comfortable\", \"Comfortable\", \"Uncomfortable\", \"Very uncomfortable\"] },\n  { id: 4, question: \"Can you identify what triggers your emotional responses?\", options: [\"Always\", \"Often\", \"Sometimes\", \"Rarely\"] },\n  { id: 5, question: \"How well do you understand other people's emotions?\", options: [\"Very well\", \"Well\", \"Somewhat\", \"Not well\"] },\n  { id: 6, question: \"Do you stay calm under pressure?\", options: [\"Always\", \"Usually\", \"Sometimes\", \"Rarely\"] },\n  { id: 7, question: \"Can you motivate yourself to achieve your goals?\", options: [\"Always\", \"Usually\", \"Sometimes\", \"Rarely\"] },\n  { id: 8, question: \"How well do you handle criticism?\", options: [\"Very well\", \"Well\", \"Poorly\", \"Very poorly\"] },\n  { id: 9, question: \"Do you adapt easily to changes?\", options: [\"Very easily\", \"Easily\", \"With difficulty\", \"Not at all\"] },\n  { id: 10, question: \"Can you read non-verbal cues from others?\", options: [\"Always\", \"Often\", \"Sometimes\", \"Rarely\"] },\n  { id: 11, question: \"How well do you manage conflicts?\", options: [\"Very well\", \"Well\", \"Poorly\", \"Very poorly\"] },\n  { id: 12, question: \"Do you take time to reflect on your emotions?\", options: [\"Always\", \"Often\", \"Sometimes\", \"Rarely\"] },\n  { id: 13, question: \"Can you maintain positive relationships despite differences?\", options: [\"Always\", \"Usually\", \"Sometimes\", \"Rarely\"] },\n  { id: 14, question: \"How well do you bounce back from setbacks?\", options: [\"Very well\", \"Well\", \"Poorly\", \"Very poorly\"] },\n  { id: 15, question: \"Do you practice self-compassion when you make mistakes?\", options: [\"Always\", \"Usually\", \"Sometimes\", \"Rarely\"] },\n];\n\ninterface EQAssessmentProps {\n  onComplete?: (score: number) => void;\n  canRetake?: boolean;\n  hasCompleted?: boolean;\n}\n\nexport default function EQAssessment({ onComplete, canRetake = false, hasCompleted = false }: EQAssessmentProps) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [answers, setAnswers] = useState<number[]>([]);\n  const [completed, setCompleted] = useState(hasCompleted);\n  const [score, setScore] = useState(0);\n\n  const handleAnswer = (answerIndex: number) => {\n    const newAnswers = [...answers, answerIndex];\n    setAnswers(newAnswers);\n\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      const finalScore = Math.round((newAnswers.reduce((a, b) => a + (4 - b), 0) / (questions.length * 4)) * 100);\n      setScore(finalScore);\n      setCompleted(true);\n      onComplete?.(finalScore);\n    }\n  };\n\n  const handleRetake = () => {\n    if (canRetake) {\n      setCurrentQuestion(0);\n      setAnswers([]);\n      setCompleted(false);\n      setScore(0);\n    }\n  };\n\n  const progress = ((currentQuestion + 1) / questions.length) * 100;\n\n  if (completed && !canRetake) {\n    return (\n      <Card className=\"p-8\" data-testid=\"card-eq-completed\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"bg-primary/10 w-20 h-20 rounded-full flex items-center justify-center mx-auto\">\n            <CheckCircle className=\"w-10 h-10 text-primary\" data-testid=\"icon-check\" />\n          </div>\n          <h3 className=\"text-2xl font-bold\" data-testid=\"text-completed\">Assessment Already Completed</h3>\n          <p className=\"text-muted-foreground\" data-testid=\"text-completed-message\">\n            You have already completed your EQ assessment. Upgrade to Pro to track your progress over time with unlimited retakes.\n          </p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"p-8\" data-testid=\"card-eq-assessment\">\n      <div className=\"flex items-center gap-3 mb-6\">\n        <div className=\"bg-primary/10 p-3 rounded-lg\">\n          <Brain className=\"w-6 h-6 text-primary\" data-testid=\"icon-brain\" />\n        </div>\n        <div>\n          <h2 className=\"text-2xl font-bold\" data-testid=\"text-eq-title\">Emotional Intelligence Assessment</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-eq-subtitle\">\n            {canRetake ? 'Track your progress over time' : 'Understand your emotional awareness'}\n          </p>\n        </div>\n      </div>\n\n      <AnimatePresence mode=\"wait\">\n        {!completed ? (\n          <motion.div\n            key={currentQuestion}\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -20 }}\n            transition={{ duration: 0.3 }}\n          >\n            <div className=\"mb-4 flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"text-question-number\">\n                Question {currentQuestion + 1} of {questions.length}\n              </span>\n            </div>\n            <Progress value={progress} className=\"mb-6\" data-testid=\"progress-eq\" />\n            <div className=\"space-y-6\">\n              <p className=\"text-lg font-medium\" data-testid={`text-question-${currentQuestion}`}>\n                {questions[currentQuestion].question}\n              </p>\n              <div className=\"space-y-3\">\n                {questions[currentQuestion].options.map((option, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    className=\"w-full justify-start text-left h-auto py-4 px-6 hover-elevate\"\n                    onClick={() => handleAnswer(index)}\n                    data-testid={`button-option-${index}`}\n                  >\n                    {option}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </motion.div>\n        ) : (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            className=\"text-center space-y-6\"\n          >\n            <div className=\"bg-primary/10 w-20 h-20 rounded-full flex items-center justify-center mx-auto\">\n              <CheckCircle className=\"w-10 h-10 text-primary\" data-testid=\"icon-check\" />\n            </div>\n            <div>\n              <h3 className=\"text-3xl font-bold mb-2\" data-testid=\"text-eq-score\">Your EQ Score: {score}</h3>\n              <p className=\"text-muted-foreground\" data-testid=\"text-eq-result\">\n                {score >= 80 ? \"Excellent emotional awareness! You have strong emotional intelligence.\" : \n                 score >= 60 ? \"Good emotional understanding. You're on the right path.\" : \n                 score >= 40 ? \"Developing emotional intelligence. Keep working on it.\" :\n                 \"Room for growth in emotional intelligence. Consider professional support.\"}\n              </p>\n            </div>\n            {canRetake && (\n              <Button onClick={handleRetake} data-testid=\"button-retake\">\n                Retake Assessment\n              </Button>\n            )}\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </Card>\n  );\n}\n","size_bytes":7646},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"src/models/session.ts":{"content":"\r\nimport { Schema, model, Document, Types } from 'mongoose';\r\n\r\n// Interface defining the properties for a Session document\r\nexport interface ISession extends Document {\r\n    userId: Types.ObjectId; // Links to the User model\r\n    token: string;          // The JWT token for this session\r\n    expiresAt: Date;        // When the token/session expires\r\n    deviceInfo?: string;    // Optional info like user agent\r\n}\r\n\r\nconst sessionSchema = new Schema<ISession>({\r\n    userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\r\n    token: { type: String, required: true, unique: true },\r\n    expiresAt: { type: Date, required: true },\r\n    deviceInfo: { type: String },\r\n}, { timestamps: true });\r\n\r\n// TTL (Time To Live) Index: This is a powerful MongoDB feature.\r\n// It automatically deletes a session document from the database when its 'expiresAt'\r\n// time is reached. This keeps our sessions collection clean and secure.\r\nsessionSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });\r\n\r\nexport const Session = model<ISession>('Session', sessionSchema);","size_bytes":1074},"client/src/components/examples/DailyTip.tsx":{"content":"import DailyTip from '../DailyTip';\n\nexport default function DailyTipExample() {\n  return <DailyTip />;\n}\n","size_bytes":106},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"test-api.js":{"content":"// Simple script to test the chat API\r\n// For Node.js v18+ we can use the built-in fetch API\r\n// For older Node.js versions, we need to import node-fetch properly\r\nconst fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));\r\n\r\nconst BASE_URL = 'http://localhost:3001';\r\n\r\n// Simple test to check if the server is running\r\nasync function testServerConnection() {\r\n  try {\r\n    console.log(\"Testing connection to server at\", BASE_URL);\r\n    \r\n    // Test registration endpoint\r\n    console.log(\"\\n1. Testing user registration:\");\r\n    const uniqueEmail = `test${Date.now()}@example.com`;\r\n    const registerResponse = await fetch(`${BASE_URL}/api/auth/register`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        name: 'Test User',\r\n        email: uniqueEmail,\r\n        password: 'password123'\r\n      }),\r\n    });\r\n    \r\n    const registerData = await registerResponse.json();\r\n    console.log('Registration response:', registerData);\r\n    \r\n    // Wait a moment to ensure registration is processed\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Test login endpoint\r\n    console.log(\"\\n2. Testing user login with the same email:\");\r\n    const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        email: uniqueEmail,\r\n        password: 'password123'\r\n      }),\r\n    });\r\n    \r\n    const loginData = await loginResponse.json();\r\n    console.log('Login response:', loginData);\r\n    \r\n    if (loginData.token && loginData.user && loginData.user.id) {\r\n      console.log(\"✅ Authentication working correctly\");\r\n      \r\n      // Test chat session creation\r\n      console.log(\"\\n3. Testing chat session creation:\");\r\n      const sessionResponse = await fetch(`${BASE_URL}/api/chat/session`, {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${loginData.token}`\r\n        },\r\n        body: JSON.stringify({ userId: loginData.user.id }),\r\n      });\r\n      \r\n      const sessionData = await sessionResponse.json();\r\n      console.log('Session creation response:', sessionData);\r\n      \r\n      if (sessionData.sessionId) {\r\n        console.log(\"✅ Chat session created successfully\");\r\n        \r\n        // Test sending a message\r\n        console.log(\"\\n4. Testing message sending:\");\r\n        const messageResponse = await fetch(`${BASE_URL}/api/chat/${sessionData.sessionId}/message`, {\r\n          method: 'POST',\r\n          headers: { \r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${loginData.token}`\r\n          },\r\n          body: JSON.stringify({ \r\n            message: \"Hello, I'm feeling anxious today. Can you help me?\",\r\n            userId: loginData.user.id\r\n          }),\r\n        });\r\n        \r\n        const messageData = await messageResponse.json();\r\n        console.log('AI Response:', messageData);\r\n        \r\n        if (messageData.response) {\r\n          console.log(\"✅ Message sent and received response successfully\");\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(\"\\nTest completed!\");\r\n  } catch (error) {\r\n    console.error(\"❌ Test failed:\", error.message);\r\n  }\r\n}\r\n\r\n// Run the test\r\ntestServerConnection();","size_bytes":3409},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/HelpCenter.tsx":{"content":"import { motion } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { useLocation } from 'wouter';\nimport { ArrowLeft, HelpCircle } from 'lucide-react';\nimport Footer from '@/components/Footer';\n\nexport default function HelpCenter() {\n  const [, setLocation] = useLocation();\n\n  const faqs = [\n    {\n      question: \"How to reset your password\",\n      answer: \"Click on 'Forgot Password' on the login page and follow the instructions sent to your email.\"\n    },\n    {\n      question: \"Understanding your EQ score\",\n      answer: \"Your Emotional Quotient (EQ) score measures your emotional intelligence across 10 key factors. Higher scores indicate stronger emotional awareness and management abilities.\"\n    },\n    {\n      question: \"Managing privacy settings\",\n      answer: \"Go to Settings > Privacy to control who can see your profile, journal entries, and assessment results.\"\n    },\n    {\n      question: \"Contacting your mentor or counselor\",\n      answer: \"Visit the Therapists section and select your assigned mentor or counselor to schedule a session or send a message.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"bg-gradient-to-br from-[#1a3a52] to-[#2d5a8f] py-16\">\n        <div className=\"container mx-auto px-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation('/')}\n            className=\"text-white hover:bg-white/10 mb-8\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-white\">Help Center</h1>\n          <p className=\"text-white/80 mt-4\">Need assistance? We're here to help.</p>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-6 py-12 max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <p className=\"text-lg text-muted-foreground mb-12\">\n            You can explore guides, FAQs, and emotional growth tips in our in-app Help Center.\n            For technical issues or account help, reach us at{' '}\n            <a href=\"mailto:support@kairo.app\" className=\"text-primary hover:underline\">\n              support@kairo.app\n            </a>\n          </p>\n\n          <h2 className=\"text-2xl font-bold mb-8\">Common Topics</h2>\n          \n          <div className=\"space-y-6\">\n            {faqs.map((faq, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n                className=\"bg-card rounded-lg p-6 shadow-sm border\"\n              >\n                <div className=\"flex items-start gap-4\">\n                  <HelpCircle className=\"w-6 h-6 text-primary mt-1 flex-shrink-0\" />\n                  <div>\n                    <h3 className=\"font-semibold text-lg mb-2\">{faq.question}</h3>\n                    <p className=\"text-muted-foreground\">{faq.answer}</p>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n\n          <div className=\"mt-12 p-8 bg-primary/5 rounded-lg text-center\">\n            <h3 className=\"text-xl font-bold mb-4\">Still need help?</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Our support team is ready to assist you with any questions or concerns.\n            </p>\n            <Button onClick={() => setLocation('/contact-support')}>\n              Contact Support\n            </Button>\n          </div>\n        </motion.div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3754},"src/controllers/chatController.ts":{"content":"import { Request, Response } from 'express';\r\nimport { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from '@google/generative-ai';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// ✅ Use default imports from guarded model files\r\nimport Chat from '../models/Chat';\r\nimport User from '../models/user';\r\n\r\nimport mongoose from 'mongoose';\r\n\r\n// Get API key from environment variables\r\nconst apiKey = process.env.GEMINI_API_KEY || \"AIzaSyAUX93NRdIbX3Ewfpcrlytbg9f5FbxkzDI\";\r\nconsole.log('Using Gemini API key:', apiKey.substring(0, 5) + '...');\r\nconst genAI = new GoogleGenerativeAI(apiKey);\r\n\r\n/**\r\n * Creates a new, empty chat session for a user.\r\n */\r\nexport const createChatSession = async (req: Request, res: Response) => {\r\n  try {\r\n    const { userId } = req.body;\r\n\r\n    if (!userId) {\r\n      return res.status(400).json({ message: 'User ID is required.' });\r\n    }\r\n\r\n    const user = await User.findById(userId);\r\n    if (!user) {\r\n      return res.status(404).json({ message: 'User not found.' });\r\n    }\r\n\r\n    const newSession = new Chat({\r\n      userId,\r\n      sessionId: uuidv4(),\r\n      messages: [],\r\n    });\r\n\r\n    await newSession.save();\r\n\r\n    res.status(201).json({\r\n      message: 'New chat session created.',\r\n      sessionId: newSession.sessionId,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error creating chat session:', error);\r\n    res.status(500).json({ message: 'Server error while creating chat session.' });\r\n  }\r\n};\r\n\r\n/**\r\n * Handles sending a message to the Gemini AI and getting a response.\r\n */\r\nexport const sendMessage = async (req: Request, res: Response) => {\r\n  try {\r\n    const { sessionId } = req.params;\r\n    const { message, userId } = req.body;\r\n\r\n    if (!message || !userId) {\r\n      return res.status(400).json({ message: 'User ID and message are required.' });\r\n    }\r\n\r\n    // Find the existing chat session in the database\r\n    const chatSession = await Chat.findOne({ sessionId, userId });\r\n    if (!chatSession) {\r\n      return res.status(404).json({ message: 'Chat session not found or you are not authorized.' });\r\n    }\r\n\r\n    // Prepare conversation history\r\n    const history = chatSession.messages.map((msg: any) => ({\r\n      role: msg.role === 'user' ? 'user' : 'model',\r\n      parts: [{ text: msg.content }],\r\n    }));\r\n\r\n    // Configure and start the AI chat\r\n    const model = genAI.getGenerativeModel({\r\n      model: 'gemini-1.5-flash',\r\n      systemInstruction:\r\n        'You are Aura, a supportive and empathetic AI therapist. Your goal is to listen, understand, and provide gentle, helpful guidance. Do not give medical advice. Focus on active listening, validation, and suggesting mindfulness techniques. Keep your responses concise and caring.',\r\n    });\r\n\r\n    const chat = model.startChat({\r\n      history,\r\n      generationConfig: {\r\n        maxOutputTokens: 500,\r\n      },\r\n      safetySettings: [\r\n        {\r\n          category: HarmCategory.HARM_CATEGORY_HARASSMENT,\r\n          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\r\n        },\r\n        {\r\n          category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\r\n          threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\r\n        },\r\n      ],\r\n    });\r\n\r\n    const result = await chat.sendMessage(message);\r\n    const aiResponse = await result.response;\r\n    const aiResponseText = aiResponse.text();\r\n\r\n    // Save messages\r\n    chatSession.messages.push({\r\n      role: 'user',\r\n      content: message,\r\n      timestamp: new Date(),\r\n    });\r\n\r\n    chatSession.messages.push({\r\n      role: 'assistant',\r\n      content: aiResponseText,\r\n      timestamp: new Date(),\r\n    });\r\n\r\n    await chatSession.save();\r\n\r\n    res.status(200).json({ response: aiResponseText });\r\n  } catch (error) {\r\n    console.error('Error sending message:', error);\r\n    res.status(500).json({ message: 'Server error while sending message.' });\r\n  }\r\n};\r\n","size_bytes":3876},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"src/models/Chat.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\r\n\r\n// Interface for the Chat document\r\nexport interface IChat extends Document {\r\n  userId: mongoose.Types.ObjectId;\r\n  sessionId: string;\r\n  messages: {\r\n    role: 'user' | 'assistant';\r\n    content: string;\r\n    timestamp: Date;\r\n  }[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n// Schema for the Chat model\r\nconst ChatSchema: Schema = new Schema(\r\n  {\r\n    userId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: 'User',\r\n      required: true\r\n    },\r\n    sessionId: {\r\n      type: String,\r\n      required: true,\r\n      unique: true\r\n    },\r\n    messages: [\r\n      {\r\n        role: {\r\n          type: String,\r\n          enum: ['user', 'assistant'],\r\n          required: true\r\n        },\r\n        content: {\r\n          type: String,\r\n          required: true\r\n        },\r\n        timestamp: {\r\n          type: Date,\r\n          default: Date.now\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Create and export the Chat model\r\nexport const Chat = mongoose.model<IChat>('Chat', ChatSchema);\r\nexport default Chat;","size_bytes":1093},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"shared/schema.ts":{"content":"import { pgTable, text, timestamp, uuid, integer, real, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const therapists = pgTable(\"therapists\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  fullName: text(\"full_name\").notNull(),\n  bio: text(\"bio\").notNull(),\n  gender: text(\"gender\").notNull(), // 'male', 'female', 'non-binary', 'prefer-not-to-say'\n  experienceYears: integer(\"experience_years\").notNull(),\n  rating: real(\"rating\").notNull(),\n  reviewCount: integer(\"review_count\").notNull(),\n  virtualOffered: boolean(\"virtual_offered\").notNull().default(true),\n  inPersonOffered: boolean(\"in_person_offered\").notNull().default(false),\n  acceptsNewClients: boolean(\"accepts_new_clients\").notNull().default(true),\n  approachStyle: text(\"approach_style\").notNull(), // 'exploratory', 'skills-based', 'balanced'\n  focusOrientation: text(\"focus_orientation\").notNull(), // 'current-problems', 'past-understanding', 'flexible'\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const therapistSpecializations = pgTable(\"therapist_specializations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  therapistId: uuid(\"therapist_id\").notNull().references(() => therapists.id, { onDelete: 'cascade' }),\n  concernTag: text(\"concern_tag\").notNull(), // 'anxiety', 'depression', 'trauma', etc.\n});\n\nexport const therapistAvailability = pgTable(\"therapist_availability\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  therapistId: uuid(\"therapist_id\").notNull().references(() => therapists.id, { onDelete: 'cascade' }),\n  availabilityBlock: text(\"availability_block\").notNull(), // 'morning', 'afternoon', 'evening', 'flexible'\n});\n\nexport const matchingResponses = pgTable(\"matching_responses\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: 'cascade' }),\n  priorTherapy: text(\"prior_therapy\"), // 'yes-helpful', 'yes-not-helpful', 'no'\n  approachPreference: text(\"approach_preference\"), // 'exploratory', 'skills-based', 'balanced'\n  focusPreference: text(\"focus_preference\"), // 'current-problems', 'past-understanding', 'unsure'\n  genderPreference: text(\"gender_preference\"), // 'male', 'female', 'non-binary', 'no-preference'\n  submittedAt: timestamp(\"submitted_at\").defaultNow().notNull(),\n});\n\nexport const matchingSessionPreferences = pgTable(\"matching_session_preferences\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  matchingResponseId: uuid(\"matching_response_id\").notNull().references(() => matchingResponses.id, { onDelete: 'cascade' }),\n  sessionType: text(\"session_type\").notNull(), // 'in-person', 'virtual', 'either'\n});\n\nexport const matchingAvailabilityPreferences = pgTable(\"matching_availability_preferences\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  matchingResponseId: uuid(\"matching_response_id\").notNull().references(() => matchingResponses.id, { onDelete: 'cascade' }),\n  availabilityBlock: text(\"availability_block\").notNull(), // 'morning', 'afternoon', 'evening', 'flexible'\n});\n\nexport const matchingConcernPreferences = pgTable(\"matching_concern_preferences\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  matchingResponseId: uuid(\"matching_response_id\").notNull().references(() => matchingResponses.id, { onDelete: 'cascade' }),\n  concernTag: text(\"concern_tag\").notNull(), // 'anxiety', 'depression', 'trauma', etc.\n});\n\nexport const insertUserSchema = createInsertSchema(users);\nexport const selectUserSchema = createSelectSchema(users);\nexport const insertTherapistSchema = createInsertSchema(therapists);\nexport const selectTherapistSchema = createSelectSchema(therapists);\nexport const insertTherapistSpecializationSchema = createInsertSchema(therapistSpecializations);\nexport const selectTherapistSpecializationSchema = createSelectSchema(therapistSpecializations);\nexport const insertTherapistAvailabilitySchema = createInsertSchema(therapistAvailability);\nexport const selectTherapistAvailabilitySchema = createSelectSchema(therapistAvailability);\nexport const insertMatchingResponseSchema = createInsertSchema(matchingResponses);\nexport const selectMatchingResponseSchema = createSelectSchema(matchingResponses);\n\nexport type User = z.infer<typeof selectUserSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Therapist = z.infer<typeof selectTherapistSchema>;\nexport type InsertTherapist = z.infer<typeof insertTherapistSchema>;\nexport type TherapistSpecialization = z.infer<typeof selectTherapistSpecializationSchema>;\nexport type TherapistAvailability = z.infer<typeof selectTherapistAvailabilitySchema>;\nexport type MatchingResponse = z.infer<typeof selectMatchingResponseSchema>;\n","size_bytes":5001}},"version":2}